<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project on Not today...</title>
    <link>https://ixday.github.io/categories/project/</link>
    <description>Recent content in Project on Not today...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://ixday.github.io/categories/project/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introducing Janus (SSH Agent written in Go)</title>
      <link>https://ixday.github.io/post/janus/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/janus/</guid>
      <description>Why this project I am currently using gopass to store and share my passwords. I was relying on GPG to handle the encryption side of the process. Then a colleague of mine introduced me to age. This encryption specification allows the use of SSH keys and specifically the ED25519 ones. I decided to make the switch and moved all my stores to age encryption.
I am protecting my private key with a password and only loading it inside my agent.</description>
    </item>
    
    <item>
      <title>Introducing Y2J (Yaml to Json converter)</title>
      <link>https://ixday.github.io/post/y2j/</link>
      <pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/y2j/</guid>
      <description>This post is only to present a small project and the reasons behind it. Hope it can help other people.
Why this project I am massively using jq in my shell scripts to deal with APIs. It is a powerfull tool and really help my day to day work. A few weeks ago I had to do the same kind of operations on a Yaml file, I started looking out there for alternative, and found some tooling which are translating Yaml to Json then push it to jq: here is an example.</description>
    </item>
    
    <item>
      <title>vuecc</title>
      <link>https://ixday.github.io/post/vuecc/</link>
      <pubDate>Sat, 01 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/vuecc/</guid>
      <description>I recently discovered Vue.js and I really liked it. You just have to add a script tag and you can start coding using this framework.
After a few hours of development, I decided to use SFC (Single File Components) to separate business code from components. And I got a really bad surpise! In order to compile those templates I needed to use a build system (Webpack or Browserify). The tutorial is really good, but&amp;hellip;</description>
    </item>
    
    <item>
      <title>Listing directory with wsgi</title>
      <link>https://ixday.github.io/post/listing_directory_with_wsgi/</link>
      <pubDate>Thu, 02 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/listing_directory_with_wsgi/</guid>
      <description>Recently I ran into an issue with my blog and pelican (the blogging engine I use). For some reasons (which I explain here) I had to develop a small wsgi app which act like the python SimpleHTTPServer.
I tried a lot of things but they never worked as I wanted them to. So, I decided to do this by myself.
Specifications Here are the features I wanted:
Define a directory as the root (/) directory from which all the files will be served.</description>
    </item>
    
    <item>
      <title>Small docker project</title>
      <link>https://ixday.github.io/post/small_tool/</link>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/small_tool/</guid>
      <description>I really like docker (even if I will look at [systemd-nspawn](http://www.freedesktop.org/software/systemd/man/ systemd-nspawn.html)), and also gulp. So I decided to create a small tool for serving a directory with a livereload.
The repo is available here
What I have learned Docker, especially with boot2docker (I am on MacOSX shame on me), is not really flexible:
no evaluation for environment variables
you can not store a variable through multiple run, you will need to do a oneliner e.</description>
    </item>
    
  </channel>
</rss>
