<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Snippet on Not today...</title>
    <link>http://ixday.github.io/categories/snippet/</link>
    <description>Recent content in Snippet on Not today...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 May 2018 10:22:33 +0200</lastBuildDate>
    
	<atom:link href="http://ixday.github.io/categories/snippet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Filepath Walk bug?</title>
      <link>http://ixday.github.io/post/filepath_walk/</link>
      <pubDate>Wed, 09 May 2018 10:22:33 +0200</pubDate>
      
      <guid>http://ixday.github.io/post/filepath_walk/</guid>
      <description>During the development of a small project I noticed something strange with golang&amp;rsquo;s function filepath.Walk.
If you are going over a directory, and return filepath.SkipDir error on a file entry. The walker will stop.
Setup directory First, set up a simple directory to walk
mkdir -p foo/baz touch foo/bar touch foo/baz/qux Run the script Now, let&amp;rsquo;s run this example script, with the previous directory as the entry argument. I will reuse the example from golang documentation website with small changes.</description>
    </item>
    
    <item>
      <title>Cancel copy of huge file in Go</title>
      <link>http://ixday.github.io/post/golang-cancel-copy/</link>
      <pubDate>Mon, 12 Feb 2018 11:48:04 +0100</pubDate>
      
      <guid>http://ixday.github.io/post/golang-cancel-copy/</guid>
      <description>I recently came across this video on Golang programming. I think this was the moment I finally fully understood the power of Go. It is smart, simple and elegant, I love it.
Then, a few days later, I was coding on a toy project and I was doing some stuff around the io package to copy huge files. I wanted to achieve copy cancelation during the processing, basically, being able to interrupt.</description>
    </item>
    
    <item>
      <title>direnv</title>
      <link>http://ixday.github.io/post/direnv/</link>
      <pubDate>Thu, 27 Jul 2017 10:53:10 +0200</pubDate>
      
      <guid>http://ixday.github.io/post/direnv/</guid>
      <description>I recently discovered the direnv project. Which helped me a lot for setting up my development environments. I will share a bit of things I use in my daily basis.
Python projects This is well documented but here is what I use in python projects to set up a default virtualenv.
layout python That&amp;rsquo;s it! It sets up a virtualenv in your .direnv directory, and load the updated PATH.</description>
    </item>
    
    <item>
      <title>golang err shadowing</title>
      <link>http://ixday.github.io/post/golang-err-shadowing/</link>
      <pubDate>Tue, 25 Jul 2017 10:44:02 +0200</pubDate>
      
      <guid>http://ixday.github.io/post/golang-err-shadowing/</guid>
      <description>A feature I like in golang is the hability to declare a variable at the assignation time. Something like this:
foo := &amp;#34;bar&amp;#34; Here the variable foo will automatically set up as a string with the value &amp;ldquo;bar&amp;rdquo;. One more feature is to be able to allocate on same line as doing a comparison. Like this:
if foo := &amp;#34;bar&amp;#34;; foo == &amp;#34;baz&amp;#34; { // do something } else { // do something else } This is really handy when it comes to catch errors from an other function:</description>
    </item>
    
    <item>
      <title>Git clone inside a mounted volume with Docker</title>
      <link>http://ixday.github.io/post/docker_git_volume/</link>
      <pubDate>Mon, 13 Mar 2017 14:52:21 +0100</pubDate>
      
      <guid>http://ixday.github.io/post/docker_git_volume/</guid>
      <description>DISCLAIMER: This is now fixed in git new releases and does not need to be done anymore. I use an old version of alpine in order to have an unpached version of git.
I ran into an interesting issue lastly. I wanted to mount a volume inside a container and clone a repo in it. I also wanted to avoid messing with the permissions and pass my user to the container as well.</description>
    </item>
    
    <item>
      <title>Makefile</title>
      <link>http://ixday.github.io/post/makefile/</link>
      <pubDate>Wed, 15 Feb 2017 10:57:00 +0100</pubDate>
      
      <guid>http://ixday.github.io/post/makefile/</guid>
      <description>Recently, I had to build some project involving a lot of files. Two choices were possible:
 use a script to build use a Makefile  I ended up with a Makefile, which is the best solution I think. As the script has to generate a bunch of files from &amp;ldquo;source&amp;rdquo; files. (I have to confess also, I have been a bit influenced by jessfraz with those tweets: here and here)</description>
    </item>
    
    <item>
      <title>Docker Nspawn</title>
      <link>http://ixday.github.io/post/docker_nspawn/</link>
      <pubDate>Wed, 23 Nov 2016 09:48:08 +0100</pubDate>
      
      <guid>http://ixday.github.io/post/docker_nspawn/</guid>
      <description>Don&amp;rsquo;t want to use Docker? Still want to start containers for tests or whatever? Don&amp;rsquo;t want to install yet another software to perform this? Want to understand a bit of how all those things work? Great! I will show you how to boot a container from the internet only through systemd-nspawn
Thanks to the CoreOS team (love those guys) a new hub for storing container now exists: quay. The other good news is the ACI, the container image format defined in the App Container (appc) spec.</description>
    </item>
    
    <item>
      <title>Curl utils</title>
      <link>http://ixday.github.io/post/curl_utils/</link>
      <pubDate>Tue, 19 Jul 2016 14:24:57 +0200</pubDate>
      
      <guid>http://ixday.github.io/post/curl_utils/</guid>
      <description>Here are some options and command I use with curl when dealing with stuff I have to develop.
curl -si &amp;lt;ip&amp;gt; # -s is the silent flag, it removes the progress  # -i displays the headers  curl -X POST -H &amp;#34;Content-Type: application/json&amp;#34; -u &amp;#34;admin:admin&amp;#34; -d &amp;#39;{}&amp;#39; &amp;lt;ip&amp;gt; # -X set up the http method (here POST) # -H set up an header, format is: &amp;#34;header_name: value&amp;#34; # -u support for Basic Auth, format is: &amp;#34;user:password&amp;#34; # -d set up data to send to the server I mostly use those options, the -s is really interesting when you want to grep the content.</description>
    </item>
    
    <item>
      <title>Gogs &#43; Drone</title>
      <link>http://ixday.github.io/post/gogs_drone_compose/</link>
      <pubDate>Thu, 12 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/gogs_drone_compose/</guid>
      <description>Jenkins is everywhere now, but I really don&amp;rsquo;t like it. So I am looking at a replacement from day to day. I discovered Gogs an I though that a CI is also a good use case for the Golang language.
And I finally found Drone (which was not really difficult as it is mentionned in a ticket on gogs github).
So I decided to make them work together in order to test that.</description>
    </item>
    
    <item>
      <title>Getting rid of gulp bunch of dependencies</title>
      <link>http://ixday.github.io/post/getting_rid_of_gulp_bunch_of_dependencies/</link>
      <pubDate>Sun, 10 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/getting_rid_of_gulp_bunch_of_dependencies/</guid>
      <description>Recently Nodejs environment broke due the removal from npm of a small library (11 SLOC): leftpad. As it hit the world and broke a bunch of projects and CIs, I asked myself if my projects contains so much dependencies that if one break, everything collapse.
The problem For developing my frontend I use a tool which I really like: Gulp. The issue there, is that for working with multiple building process involved a lot of glue and third party libraries.</description>
    </item>
    
    <item>
      <title>Pytest command line</title>
      <link>http://ixday.github.io/post/pytest_command_line/</link>
      <pubDate>Wed, 16 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/pytest_command_line/</guid>
      <description>I have recently dug into pytest documentation, and moreover into the command line arguments and I finally found a better workflow for running tests while I develop.
Here is the command I run when I just made some devs: py.test -xvvvs --tb=line --pdb
 -x will stop execution on first failue, useful when debugging tests in order of appearance (recommended) -vvv will display current test path (reuasable in py.test), the path will avoid to rerun all the previous tests before going to the one you are currently working on.</description>
    </item>
    
    <item>
      <title>Bash Expansion</title>
      <link>http://ixday.github.io/post/bash_expansion/</link>
      <pubDate>Thu, 20 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/bash_expansion/</guid>
      <description>A small post just to share a useful bashism the Brace Expansion. It is really simple to make it works:
for i in {1..50} do echo &amp;#34;Hello World $i&amp;#34; done It will print fifty &amp;ldquo;Hello World&amp;rdquo;. Ok it seems cool but not amazing? Ok, now the second feature
echo something/{foo,bar} &amp;gt; something/foo something/bar Still not amazed, ok now type this one:
cp some_file{,.old} It will copy your file adding a .</description>
    </item>
    
    <item>
      <title>Test promises with jasmine</title>
      <link>http://ixday.github.io/post/jasmine_promises/</link>
      <pubDate>Thu, 30 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/jasmine_promises/</guid>
      <description>Jasmine is a good testing framework, which I really like, it is really powerfull and has just the amount of features to perform a huge variety of tests.
At some point I had to tests promises, and more generally testing that some part of a function is not called (you will have to adapt the snippet but the idea is here).
It is pretty simple, but not well known (I checked some stackoverflow threads before finding this).</description>
    </item>
    
    <item>
      <title>HTML5 Boilerplate</title>
      <link>http://ixday.github.io/post/html5-boilerplate/</link>
      <pubDate>Tue, 30 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/html5-boilerplate/</guid>
      <description>Sometimes we only need to have a boilerplate quickly to test it through a browser. We only want to have the basis, and having it working fine.
You can find here a good generator for what you want. But sometimes, having a snippet in the bash prompt can be needed.
So here is an example:
# stop script if something bad happen set -e # unzip need to have a tempfile to extract properly TMPFILE=&amp;#34;/tmp/tempfile.</description>
    </item>
    
  </channel>
</rss>