<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tuto on Not today...</title>
    <link>https://ixday.github.io/categories/tuto/</link>
    <description>Recent content in Tuto on Not today...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ixday.github.io/categories/tuto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Debug Terraform</title>
      <link>https://ixday.github.io/post/debug_terraform/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/debug_terraform/</guid>
      <description>How to easily debug Terraform? This was one of my biggest problem when dealing with the tool. I followed instructions to use some output ressources or browse the &amp;ldquo;debug&amp;rdquo; logs. Disclaimer: none of it was working properly.
So here is what I am actually doing and I am perfectly happy with. Oh! And just before starting to enable debug logs you have to pass the environment variable TF_LOG=debug (because there is no man page and it is not written in the --help content).</description>
    </item>
    
    <item>
      <title>Wireguard on a Linux Alpine with Docker</title>
      <link>https://ixday.github.io/post/alpine_docker_wireguard/</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/alpine_docker_wireguard/</guid>
      <description>For most of my infrastructure, I am now using Alpine Linux. I like it because it only has a small number of moving parts. It&amp;rsquo;s easy to know and master them, it is making my life easier :).
So, I decided to install one on my VPS. Like my distro I wanted it to be simple and small. For all those reasons I went for Wireguard. The fact that it is the new cool kid, may also have helped.</description>
    </item>
    
    <item>
      <title>Gopass</title>
      <link>https://ixday.github.io/post/gopass/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/gopass/</guid>
      <description>A pretty good security advice would be to never write down a password unencrypted on disk. This can be pretty tricky to achieve, especially on personal and development environments. So let me introduce gopass which is a tool aiming to help with this problem.
First of all, let me say it right away, the CLI interface is not that good. Took me a lot of time to set things properly as options may be cryptic and behavior is not obvious as first sight.</description>
    </item>
    
    <item>
      <title>Alpine iPXE</title>
      <link>https://ixday.github.io/post/alpine_ipxe/</link>
      <pubDate>Thu, 02 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/alpine_ipxe/</guid>
      <description>&lt;p&gt;For a personal project I want to iPXE boot alpine. I did not found any step by
step guide, so I ended up testing multiple solutions until it works. This
post is a &amp;ldquo;copy&amp;rdquo; of the answer I made &lt;a href=&#34;https://github.com/antonym/netboot.xyz/issues/30#issuecomment-276722892&#34;&gt;here&lt;/a&gt; for the &lt;a href=&#34;https://netboot.xyz&#34;&gt;netboot.xyz project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To fix this issue I used a bunch of thread and resources but here are the three
main entry used:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Libvirt through vagrant</title>
      <link>https://ixday.github.io/post/libvirt_through_vagrant/</link>
      <pubDate>Fri, 03 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/libvirt_through_vagrant/</guid>
      <description>I will not install VirtualBox! That&amp;rsquo;s all (nor VMWare, don&amp;rsquo;t be ridiculous). But I really like Vagrant, and use it every time I need something closer to a running machine. So, I dig up the internet and found that there is an unofficial support of libvirt.
Installation I do not remember where I found the documentation to do this or if I did it by myself, so no link here, just what I do in order to make this work.</description>
    </item>
    
    <item>
      <title>Gogs &#43; Drone</title>
      <link>https://ixday.github.io/post/gogs_drone_compose/</link>
      <pubDate>Thu, 12 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/gogs_drone_compose/</guid>
      <description>Jenkins is everywhere now, but I really don&amp;rsquo;t like it. So I am looking at a replacement from day to day. I discovered Gogs an I though that a CI is also a good use case for the Golang language.
And I finally found Drone (which was not really difficult as it is mentionned in a ticket on gogs github).
So I decided to make them work together in order to test that.</description>
    </item>
    
    <item>
      <title>Pdbpp</title>
      <link>https://ixday.github.io/post/pdbpp/</link>
      <pubDate>Sun, 28 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/pdbpp/</guid>
      <description>I am a huge fan of ipython and its debugger ipdb (I have also done a patch on it). Then I discovered pdbpp and I found it so great that I no more use ipdb, here is why.
More features Sticky mode Pdbpp comes with a lot of additional features which are really convenient. The first and more well known is the sticky mode:
 This will display the code currently, executed and shows you with an arrow at which exact line you are.</description>
    </item>
    
    <item>
      <title>weechat</title>
      <link>https://ixday.github.io/post/weechat/</link>
      <pubDate>Thu, 16 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/weechat/</guid>
      <description>Weechat is an ncurse client for IRC, which I use and have tweaked to fit my needs.
But Weechat have one major issue: IT IS NOT USER FRIENDLY. The documentation is poor, there is a lot of plugins, which documentation is even poorer, and the configuration is a hell.
WELCOME!
First of all the installation, apt-get install weechat will be sufficient on a real OS. Then, just type weechat in order to launch the client.</description>
    </item>
    
    <item>
      <title>Patch dependency</title>
      <link>https://ixday.github.io/post/patch_dependency/</link>
      <pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/patch_dependency/</guid>
      <description>When developing on a project it is possible that a dependency can have an issue. First you want to be able to debug it (pdb, ipdb), then modify it if you find a bug. To do that there is a naive way in python, which consist in editing directly the sources of the module. But there is a cleaner way based on pip.
The -e option allows you to pass a path (git, http, file) for a given module and link it to your environment.</description>
    </item>
    
    <item>
      <title>Systemd-nspawn</title>
      <link>https://ixday.github.io/post/systemd_nspawn/</link>
      <pubDate>Tue, 19 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/systemd_nspawn/</guid>
      <description>I am a huge fan of docker for my dev environments, it helps me keeping things clear and understanding what are the ressources needed for a project. A few month ago a friend told me that there already is a similar feature on Linux, and this feature is systemd-nspawn.
Creating your first container So like docker I wanted to first start a container. Nspawn has no environment so everything has to be done &amp;ldquo;by hand&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Pytest Fixture</title>
      <link>https://ixday.github.io/post/pytest_fixture/</link>
      <pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/pytest_fixture/</guid>
      <description>I am a huge fan of python (one of the best language in my toolbox). And when it comes to tests, pytest is THE library to use.
I also use Flask a lot, so today I will show you some of my snippets.
First one the app fixture:
@pytest.fixture(autouse=True) def app(): &amp;#34;&amp;#34;&amp;#34;Load flask in testing mode&amp;#34;&amp;#34;&amp;#34; app_test = myapp app_test.config[&amp;#39;TESTING&amp;#39;] = True app_test.json_encoder = my_encoder return app_test.test_client() This create an app fixture which will be used to test the application, it returns a test client to interact with my Flask application.</description>
    </item>
    
    <item>
      <title>ssh, rsync and fswatch</title>
      <link>https://ixday.github.io/post/rsync_fswatch/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/rsync_fswatch/</guid>
      <description>Sometimes I just can&amp;rsquo;t work on a local environment (particular architecture, particular services, local configuration too complex, etc&amp;hellip;). So, I have to synchronize my local directory with a remote one and test the web interface on my local machine.
ssh First, ssh! For this I need a ssh connection to the remote server, here I use a particular ssh key.
ssh -i ~/.ssh/my_ssh.key mylogin@192.168.0.1 # urls also work ssh -i ~/.</description>
    </item>
    
    <item>
      <title>Curl for REST</title>
      <link>https://ixday.github.io/post/curl_for_rest/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/curl_for_rest/</guid>
      <description>It has been a long time since the last post. But today, I will just show two tools I use for debugging my REST APIs.
First one is the well known curl and the second one is jq.
One important feature of curl is its hability to load external files for datas with @ before file name:
curl -X POST -H &amp;#34;Content-Type: application/json&amp;#34; -d @filepath Then you can remove the progress bar by adding -s in the options</description>
    </item>
    
    <item>
      <title>Angular $parse</title>
      <link>https://ixday.github.io/post/angular-parse/</link>
      <pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/angular-parse/</guid>
      <description>Hey there, I have started to be tired of weak example of angular power, so I will go deeper on angular services and directives and wrote some articles about it.
The service $parse is the one who runs on the html to bind data with your javascript. It provides a lot of useful features which can be really interesting especially with directive manipulation.
So, we will illustrate with some examples:</description>
    </item>
    
    <item>
      <title>Bash Script</title>
      <link>https://ixday.github.io/post/bash-script/</link>
      <pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/bash-script/</guid>
      <description>Writting a bash script is kind of a complicated task, there is a strict syntax, multiple external tools, and some tricks which depends on the version and in some cases on the distribution itself (for example, grep is not the same either you are on BSD or Debian).
In this article I will talk about four code habits which can improve the maintainability of your shell scripts
Double quotes Everyone who already used a bash script will tell you to mark every variable reading with double quotes:</description>
    </item>
    
    <item>
      <title>Outside Angular</title>
      <link>https://ixday.github.io/post/outside-angular/</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/outside-angular/</guid>
      <description>There are some cases when angular is accessible but we just want to access a specific service without bootstraping an entire application.
For example, in some tests I can load some fixtures with the $http service, or use $compile for a simple template.
It is pretty simple to do that, but it is not clearly explained in the angular documentation. So here is an example:
// The module ng must be loaded angular.</description>
    </item>
    
  </channel>
</rss>
