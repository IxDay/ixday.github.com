<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Not today...</title>
    <link>http://ixday.github.io/</link>
    <description>Recent content on Not today...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Jul 2018 12:09:32 +0200</lastBuildDate>
    
	<atom:link href="http://ixday.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Log, FP and fun in Golang</title>
      <link>http://ixday.github.io/post/log_fp_and_fun/</link>
      <pubDate>Fri, 13 Jul 2018 12:09:32 +0200</pubDate>
      
      <guid>http://ixday.github.io/post/log_fp_and_fun/</guid>
      <description>Golang implementation of a simple logger is subject to some criticism. First, it does not use any extendable pattern, the only interface we can inject to modify the behavior of the logger is a writer interface. Also, the lack of a proper log level control is a subject of discussion in the community here, here, or this blog post.
This post is more a reflexion around APIs and tricks in Golang than a production ready package.</description>
    </item>
    
    <item>
      <title>Parallel runners with teardown in go</title>
      <link>http://ixday.github.io/post/teardown_runner/</link>
      <pubDate>Sun, 01 Jul 2018 17:28:16 +0200</pubDate>
      
      <guid>http://ixday.github.io/post/teardown_runner/</guid>
      <description>From time to time in go I have to start multiple small services acting in parallel. For example, a ssh server tied to an administration console (one is running on port 80 the other on port 22), or a kafka consumer pushing to a database and a website to serve those informations. You can decouple this in multiple programs, or run them through some kind of a manager and handle everything at the same place.</description>
    </item>
    
    <item>
      <title>Filepath Walk bug?</title>
      <link>http://ixday.github.io/post/filepath_walk/</link>
      <pubDate>Wed, 09 May 2018 10:22:33 +0200</pubDate>
      
      <guid>http://ixday.github.io/post/filepath_walk/</guid>
      <description>During the development of a small project I noticed something strange with golang&amp;rsquo;s function filepath.Walk.
If you are going over a directory, and return filepath.SkipDir error on a file entry. The walker will stop.
Setup directory First, set up a simple directory to walk
mkdir -p foo/baz touch foo/bar touch foo/baz/qux  Run the script Now, let&amp;rsquo;s run this example script, with the previous directory as the entry argument. I will reuse the example from golang documentation website with small changes.</description>
    </item>
    
    <item>
      <title>Cancel copy of huge file in Go</title>
      <link>http://ixday.github.io/post/golang-cancel-copy/</link>
      <pubDate>Mon, 12 Feb 2018 11:48:04 +0100</pubDate>
      
      <guid>http://ixday.github.io/post/golang-cancel-copy/</guid>
      <description>I recently came across this video on Golang programming. I think this was the moment I finally fully understood the power of Go. It is smart, simple and elegant, I love it.
Then, a few days later, I was coding on a toy project and I was doing some stuff around the io package to copy huge files. I wanted to achieve copy cancelation during the processing, basically, being able to interrupt.</description>
    </item>
    
    <item>
      <title>direnv</title>
      <link>http://ixday.github.io/post/direnv/</link>
      <pubDate>Thu, 27 Jul 2017 10:53:10 +0200</pubDate>
      
      <guid>http://ixday.github.io/post/direnv/</guid>
      <description>I recently discovered the direnv project. Which helped me a lot for setting up my development environments. I will share a bit of things I use in my daily basis.
Python projects This is well documented but here is what I use in python projects to set up a default virtualenv.
layout python  That&amp;rsquo;s it! It sets up a virtualenv in your .direnv directory, and load the updated PATH.</description>
    </item>
    
    <item>
      <title>golang err shadowing</title>
      <link>http://ixday.github.io/post/golang-err-shadowing/</link>
      <pubDate>Tue, 25 Jul 2017 10:44:02 +0200</pubDate>
      
      <guid>http://ixday.github.io/post/golang-err-shadowing/</guid>
      <description>A feature I like in golang is the hability to declare a variable at the assignation time. Something like this:
foo := &amp;quot;bar&amp;quot;  Here the variable foo will automatically set up as a string with the value &amp;ldquo;bar&amp;rdquo;. One more feature is to be able to allocate on same line as doing a comparison. Like this:
if foo := &amp;quot;bar&amp;quot;; foo == &amp;quot;baz&amp;quot; { // do something } else { // do something else }  This is really handy when it comes to catch errors from an other function:</description>
    </item>
    
    <item>
      <title>vuecc</title>
      <link>http://ixday.github.io/post/vuecc/</link>
      <pubDate>Sat, 01 Jul 2017 11:46:41 +0200</pubDate>
      
      <guid>http://ixday.github.io/post/vuecc/</guid>
      <description>I recently discovered Vue.js and I really liked it. You just have to add a script tag and you can start coding using this framework.
After a few hours of development, I decided to use SFC (Single File Components) to separate business code from components. And I got a really bad surpise! In order to compile those templates I needed to use a build system (Webpack or Browserify). The tutorial is really good, but&amp;hellip;</description>
    </item>
    
    <item>
      <title>Start libvirt VM as unprivileged user</title>
      <link>http://ixday.github.io/post/unprivileged_libvirt/</link>
      <pubDate>Mon, 01 May 2017 11:41:14 +0200</pubDate>
      
      <guid>http://ixday.github.io/post/unprivileged_libvirt/</guid>
      <description>Quick post for starting a VM inside libvirt as a non-root user. Also contains some useful snippets.
I want to start an alpine virt iso (from here) inside kvm through libvirt. But I am sick to run all my virsh commands prefixed with sudo.
DISCLAIMER: This will contain some of my conclusions with my partial understanding of those tools. I am quite sure that all of this can be improved, but I don&amp;rsquo;t have time to invest on this for the moment.</description>
    </item>
    
    <item>
      <title>Git clone inside a mounted volume with Docker</title>
      <link>http://ixday.github.io/post/docker_git_volume/</link>
      <pubDate>Mon, 13 Mar 2017 14:52:21 +0100</pubDate>
      
      <guid>http://ixday.github.io/post/docker_git_volume/</guid>
      <description>DISCLAIMER: This is now fixed in git new releases and does not need to be done anymore. I use an old version of alpine in order to have an unpached version of git.
I ran into an interesting issue lastly. I wanted to mount a volume inside a container and clone a repo in it. I also wanted to avoid messing with the permissions and pass my user to the container as well.</description>
    </item>
    
    <item>
      <title>Makefile</title>
      <link>http://ixday.github.io/post/makefile/</link>
      <pubDate>Wed, 15 Feb 2017 10:57:00 +0100</pubDate>
      
      <guid>http://ixday.github.io/post/makefile/</guid>
      <description>Recently, I had to build some project involving a lot of files. Two choices were possible:
 use a script to build use a Makefile  I ended up with a Makefile, which is the best solution I think. As the script has to generate a bunch of files from &amp;ldquo;source&amp;rdquo; files. (I have to confess also, I have been a bit influenced by jessfraz with those tweets: here and here)</description>
    </item>
    
    <item>
      <title>Alpine iPXE</title>
      <link>http://ixday.github.io/post/alpine_ipxe/</link>
      <pubDate>Thu, 02 Feb 2017 10:08:35 +0100</pubDate>
      
      <guid>http://ixday.github.io/post/alpine_ipxe/</guid>
      <description>&lt;p&gt;For a personal project I want to iPXE boot alpine. I did not found any step by
step guide, so I ended up testing multiple solutions until it works. This
post is a &amp;ldquo;copy&amp;rdquo; of the answer I made &lt;a href=&#34;https://github.com/antonym/netboot.xyz/issues/30#issuecomment-276722892&#34;&gt;here&lt;/a&gt; for the &lt;a href=&#34;https://netboot.xyz&#34;&gt;netboot.xyz project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To fix this issue I used a bunch of thread and resources but here are the three
main entry used:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker Nspawn</title>
      <link>http://ixday.github.io/post/docker_nspawn/</link>
      <pubDate>Wed, 23 Nov 2016 09:48:08 +0100</pubDate>
      
      <guid>http://ixday.github.io/post/docker_nspawn/</guid>
      <description>Don&amp;rsquo;t want to use Docker? Still want to start containers for tests or whatever? Don&amp;rsquo;t want to install yet another software to perform this? Want to understand a bit of how all those things work? Great! I will show you how to boot a container from the internet only through systemd-nspawn
Thanks to the CoreOS team (love those guys) a new hub for storing container now exists: quay. The other good news is the ACI, the container image format defined in the App Container (appc) spec.</description>
    </item>
    
    <item>
      <title>Linux Mint 2</title>
      <link>http://ixday.github.io/post/linux_mint_2/</link>
      <pubDate>Mon, 08 Aug 2016 15:23:34 +0200</pubDate>
      
      <guid>http://ixday.github.io/post/linux_mint_2/</guid>
      <description>&lt;p&gt;I recently messed up my laptop (do not play with &lt;code&gt;/etc/apt/preferences&lt;/code&gt; too much!),
and I had to reinstall my distro. I checked my &lt;a href=&#34;http://ixday.github.io/post/linux_mint/&#34;&gt;previous article&lt;/a&gt;
and noticed some missing informations. So here is a second article of things
I needed to fixup when installing LMDE on my Macbook.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash Shortcuts</title>
      <link>http://ixday.github.io/post/bash_shortcuts/</link>
      <pubDate>Wed, 20 Jul 2016 09:13:58 +0200</pubDate>
      
      <guid>http://ixday.github.io/post/bash_shortcuts/</guid>
      <description>Here is just a small reminder of common bash shortcuts for everyday use:
Ctrl + A Go to the beginning of the line you are currently typing on Ctrl + E Go to the end of the line you are currently typing on Ctrl + L Clears the Screen, similar to the clear command Ctrl + U Clears the line before the cursor position. If you are at the end of the line, clears the entire line.</description>
    </item>
    
    <item>
      <title>Curl utils</title>
      <link>http://ixday.github.io/post/curl_utils/</link>
      <pubDate>Tue, 19 Jul 2016 14:24:57 +0200</pubDate>
      
      <guid>http://ixday.github.io/post/curl_utils/</guid>
      <description>Here are some options and command I use with curl when dealing with stuff I have to develop.
curl -si &amp;lt;ip&amp;gt; # -s is the silent flag, it removes the progress # -i displays the headers curl -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -u &amp;quot;admin:admin&amp;quot; -d &amp;#39;{}&amp;#39; &amp;lt;ip&amp;gt; # -X set up the http method (here POST) # -H set up an header, format is: &amp;quot;header_name: value&amp;quot; # -u support for Basic Auth, format is: &amp;quot;user:password&amp;quot; # -d set up data to send to the server  I mostly use those options, the -s is really interesting when you want to grep the content.</description>
    </item>
    
    <item>
      <title>Libvirt through vagrant</title>
      <link>http://ixday.github.io/post/libvirt_through_vagrant/</link>
      <pubDate>Fri, 03 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/libvirt_through_vagrant/</guid>
      <description>I will not install VirtualBox! That&amp;rsquo;s all (nor VMWare, don&amp;rsquo;t be ridiculous). But I really like Vagrant, and use it every time I need something closer to a running machine. So, I dig up the internet and found that there is an unofficial support of libvirt.
Installation I do not remember where I found the documentation to do this or if I did it by myself, so no link here, just what I do in order to make this work.</description>
    </item>
    
    <item>
      <title>Gogs &#43; Drone</title>
      <link>http://ixday.github.io/post/gogs_drone_compose/</link>
      <pubDate>Thu, 12 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/gogs_drone_compose/</guid>
      <description>Jenkins is everywhere now, but I really don&amp;rsquo;t like it. So I am looking at a replacement from day to day. I discovered Gogs an I though that a CI is also a good use case for the Golang language.
And I finally found Drone (which was not really difficult as it is mentionned in a ticket on gogs github).
So I decided to make them work together in order to test that.</description>
    </item>
    
    <item>
      <title>Getting rid of gulp bunch of dependencies</title>
      <link>http://ixday.github.io/post/getting_rid_of_gulp_bunch_of_dependencies/</link>
      <pubDate>Sun, 10 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/getting_rid_of_gulp_bunch_of_dependencies/</guid>
      <description>Recently Nodejs environment broke due the removal from npm of a small library (11 SLOC): leftpad. As it hit the world and broke a bunch of projects and CIs, I asked myself if my projects contains so much dependencies that if one break, everything collapse.
The problem For developing my frontend I use a tool which I really like: Gulp. The issue there, is that for working with multiple building process involved a lot of glue and third party libraries.</description>
    </item>
    
    <item>
      <title>Pytest command line</title>
      <link>http://ixday.github.io/post/pytest_command_line/</link>
      <pubDate>Wed, 16 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/pytest_command_line/</guid>
      <description>I have recently dug into pytest documentation, and moreover into the command line arguments and I finally found a better workflow for running tests while I develop.
Here is the command I run when I just made some devs: py.test -xvvvs --tb=line --pdb
 -x will stop execution on first failue, useful when debugging tests in order of appearance (recommended) -vvv will display current test path (reuasable in py.test), the path will avoid to rerun all the previous tests before going to the one you are currently working on.</description>
    </item>
    
    <item>
      <title>Pdbpp</title>
      <link>http://ixday.github.io/post/pdbpp/</link>
      <pubDate>Sun, 28 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/pdbpp/</guid>
      <description>I am a huge fan of ipython and its debugger ipdb (I have also done a patch on it). Then I discovered pdbpp and I found it so great that I no more use ipdb, here is why.
More features Sticky mode Pdbpp comes with a lot of additional features which are really convenient. The first and more well known is the sticky mode:
  This will display the code currently, executed and shows you with an arrow at which exact line you are.</description>
    </item>
    
    <item>
      <title>Linux Mint</title>
      <link>http://ixday.github.io/post/linux_mint/</link>
      <pubDate>Mon, 22 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/linux_mint/</guid>
      <description>After a long journey, I finally found the distribution which fits all my need: Linux Mint Debian Edition
Why ?  It is based on debian a distribution which I really like (and not Ubuntu). The default tilling (similar to W7) is really comfortable. Lot of configuration can be done for shortcuts. Support for systemd (Yay \o/). Beautiful UI out of the box (which I didn&amp;rsquo;t have with TWM). And a lot more  Installation As I am on Macbook (once upon a time, I was young and dumb), I need a particular configuration of the partitions for the installation.</description>
    </item>
    
    <item>
      <title>Ansible</title>
      <link>http://ixday.github.io/post/ansible/</link>
      <pubDate>Sat, 03 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/ansible/</guid>
      <description>I have a home media server, and I spent a lot of time configuring, testing and installing on it. But I was never really satisfied by the way I had to perform the installation (which happens way too often).
And I recently discovered Ansible, which is a tool for doing a lot of stuff with a server (configuration, run repetitive command, installation) over ssh.
I really loved experienced with it, it does not require a lot of dependencies on the targeted server, and can be easily run.</description>
    </item>
    
    <item>
      <title>Pop-up with xmobar</title>
      <link>http://ixday.github.io/post/pop_up_with_xmobar/</link>
      <pubDate>Mon, 24 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/pop_up_with_xmobar/</guid>
      <description>Sometimes I just want to click, even for simple things. So I created a little popup to shutdown, restart, suspend my computer, which looks like this:
{:.image-process-article-image}{:target=&amp;rdquo;_blank&amp;rdquo;}
Preparation First of all install xmobar, apt-get install xmobar/testing. Here I will use testing because I need the multiple fonts support, see here for the release note.
The second thing I will need is an iconic font for the power button. Font Awesome fits my need.</description>
    </item>
    
    <item>
      <title>Bash Expansion</title>
      <link>http://ixday.github.io/post/bash_expansion/</link>
      <pubDate>Thu, 20 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/bash_expansion/</guid>
      <description>A small post just to share a useful bashism the Brace Expansion. It is really simple to make it works:
for i in {1..50} do echo &amp;quot;Hello World $i&amp;quot; done  It will print fifty &amp;ldquo;Hello World&amp;rdquo;. Ok it seems cool but not amazing? Ok, now the second feature
echo something/{foo,bar} &amp;gt; something/foo something/bar  Still not amazed, ok now type this one:
cp some_file{,.old}  It will copy your file adding a .</description>
    </item>
    
    <item>
      <title>Unable to find LVM volume... with LVM on top of Luks</title>
      <link>http://ixday.github.io/post/unable_to_find_lvm_volume_with_lvm_on_top_of_luks/</link>
      <pubDate>Wed, 19 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/unable_to_find_lvm_volume_with_lvm_on_top_of_luks/</guid>
      <description>&lt;p&gt;Following &lt;a href=&#34;{filename}/2015-08-18.debian-install-2.md&#34;&gt;this article&lt;/a&gt;
I have LVM on top of Luks for my system.
When I boot I encounter the following message:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;  Volume group &amp;quot;vg_ssd&amp;quot; not found
  Skipping volume group vg_ssd
Unable to find LVM volume vg_ssd/lv_root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It appears that LVM is started before I open the crypted partition and display this error.
To fix this we will manipulate the initramfs \o/.&lt;/p&gt;

&lt;p&gt;The issue is in the file &lt;code&gt;/usr/share/initramfs-tools/scripts/local-top/cryptroot&lt;/code&gt;

which starts like this:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Debian Install 3</title>
      <link>http://ixday.github.io/post/debian_install_3/</link>
      <pubDate>Tue, 18 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/debian_install_3/</guid>
      <description>&lt;p&gt;Today I want to install debian on my personal server.
And I want to crypt the FS using Luks, and add LVM on top.&lt;/p&gt;

&lt;p&gt;I want it to look like that (like this scheme, a lot of reference
come from the &lt;a href=&#34;https://wiki.archlinux.org/index.php/Dm-crypt/Encrypting_an_entire_system&#34;&gt;arch wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>weechat</title>
      <link>http://ixday.github.io/post/weechat/</link>
      <pubDate>Thu, 16 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/weechat/</guid>
      <description>Weechat is an ncurse client for IRC, which I use and have tweaked to fit my needs.
But Weechat have one major issue: IT IS NOT USER FRIENDLY. The documentation is poor, there is a lot of plugins, which documentation is even poorer, and the configuration is a hell.
WELCOME!
First of all the installation, apt-get install weechat will be sufficient on a real OS. Then, just type weechat in order to launch the client.</description>
    </item>
    
    <item>
      <title>Listing directory with wsgi</title>
      <link>http://ixday.github.io/post/listing_directory_with_wsgi/</link>
      <pubDate>Thu, 02 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/listing_directory_with_wsgi/</guid>
      <description>Recently I ran into an issue with my blog and pelican (the blogging engine I use). For some reasons (which I explain [here]()) I had to develop a small wsgi app which act like the python SimpleHTTPServer.
I tried a lot of things but they never worked as I wanted them to. So, I decided to do this by myself.
Specifications Here are the features I wanted:
 Define a directory as the root (/) directory from which all the files will be served.</description>
    </item>
    
    <item>
      <title>Patch dependency</title>
      <link>http://ixday.github.io/post/patch_dependency/</link>
      <pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/patch_dependency/</guid>
      <description>When developing on a project it is possible that a dependency can have an issue. First you want to be able to debug it (pdb, ipdb), then modify it if you find a bug. To do that there is a naive way in python, which consist in editing directly the sources of the module. But there is a cleaner way based on pip.
The -e option allows you to pass a path (git, http, file) for a given module and link it to your environment.</description>
    </item>
    
    <item>
      <title>Systemd-nspawn</title>
      <link>http://ixday.github.io/post/systemd_nspawn/</link>
      <pubDate>Tue, 19 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/systemd_nspawn/</guid>
      <description>I am a huge fan of docker for my dev environments, it helps me keeping things clear and understanding what are the ressources needed for a project. A few month ago a friend told me that there already is a similar feature on Linux, and this feature is systemd-nspawn.
Creating your first container So like docker I wanted to first start a container. Nspawn has no environment so everything has to be done &amp;ldquo;by hand&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Debian install 2</title>
      <link>http://ixday.github.io/post/debian_install_2/</link>
      <pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/debian_install_2/</guid>
      <description>After many days of configuration, I finally complete the installation of my perfect &amp;ldquo;workstation&amp;rdquo; ;).
source.list I have to directory for this, first the preferences, then the sources.list.
Just run an aptitude update, and you will some missing gpg keys, now run
apt-key adv --recv-keys --keyserver keyserver.ubuntu.com &amp;lt;key_number&amp;gt;  To have your keys installed.
sudo A sudo file is important in order to correctly manage a computer, a simple aptitude install sudo will give you the tool.</description>
    </item>
    
    <item>
      <title>Pytest Fixture</title>
      <link>http://ixday.github.io/post/pytest_fixture/</link>
      <pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/pytest_fixture/</guid>
      <description>I am a huge fan of python (one of the best language in my toolbox). And when it comes to tests, pytest is THE library to use.
I also use Flask a lot, so today I will show you some of my snippets.
First one the app fixture:
@pytest.fixture(autouse=True) def app(): &amp;quot;&amp;quot;&amp;quot;Load flask in testing mode&amp;quot;&amp;quot;&amp;quot; app_test = myapp app_test.config[&amp;#39;TESTING&amp;#39;] = True app_test.json_encoder = my_encoder return app_test.test_client()  This create an app fixture which will be used to test the application, it returns a test client to interact with my Flask application.</description>
    </item>
    
    <item>
      <title>Small docker project</title>
      <link>http://ixday.github.io/post/small_tool/</link>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/small_tool/</guid>
      <description>I really like docker (even if I will look at systemd-nspawn), and also gulp. So I decided to create a small tool for serving a directory with a livereload.
The repo is available here
What I have learned  Docker, especially with boot2docker (I am on MacOSX shame on me), is not really flexible:
 no evaluation for environment variables you can not store a variable through multiple run, you will need to do a oneliner e.</description>
    </item>
    
    <item>
      <title>ssh, rsync and fswatch</title>
      <link>http://ixday.github.io/post/rsync_fswatch/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/rsync_fswatch/</guid>
      <description>Sometimes I just can&amp;rsquo;t work on a local environment (particular architecture, particular services, local configuration too complex, etc&amp;hellip;). So, I have to synchronize my local directory with a remote one and test the web interface on my local machine.
ssh First, ssh! For this I need a ssh connection to the remote server, here I use a particular ssh key.
ssh -i ~/.ssh/my_ssh.key mylogin@192.168.0.1 # urls also work ssh -i ~/.</description>
    </item>
    
    <item>
      <title>Curl for REST</title>
      <link>http://ixday.github.io/post/curl_for_rest/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/curl_for_rest/</guid>
      <description>It has been a long time since the last post. But today, I will just show two tools I use for debugging my REST APIs.
First one is the well known curl and the second one is jq.
One important feature of curl is its hability to load external files for datas with @ before file name:
curl -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -d @filepath  Then you can remove the progress bar by adding -s in the options</description>
    </item>
    
    <item>
      <title>Test promises with jasmine</title>
      <link>http://ixday.github.io/post/jasmine_promises/</link>
      <pubDate>Thu, 30 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/jasmine_promises/</guid>
      <description>Jasmine is a good testing framework, which I really like, it is really powerfull and has just the amount of features to perform a huge variety of tests.
At some point I had to tests promises, and more generally testing that some part of a function is not called (you will have to adapt the snippet but the idea is here).
It is pretty simple, but not well known (I checked some stackoverflow threads before finding this).</description>
    </item>
    
    <item>
      <title>Angular $parse</title>
      <link>http://ixday.github.io/post/angular-parse/</link>
      <pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/angular-parse/</guid>
      <description>Hey there, I have started to be tired of weak example of angular power, so I will go deeper on angular services and directives and wrote some articles about it.
The service $parse is the one who runs on the html to bind data with your javascript. It provides a lot of useful features which can be really interesting especially with directive manipulation.
So, we will illustrate with some examples:</description>
    </item>
    
    <item>
      <title>Bash Script</title>
      <link>http://ixday.github.io/post/bash-script/</link>
      <pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/bash-script/</guid>
      <description>Writting a bash script is kind of a complicated task, there is a strict syntax, multiple external tools, and some tricks which depends on the version and in some cases on the distribution itself (for example, grep is not the same either you are on BSD or Debian).
In this article I will talk about four code habits which can improve the maintainability of your shell scripts
Double quotes Everyone who already used a bash script will tell you to mark every variable reading with double quotes:</description>
    </item>
    
    <item>
      <title>Debian Install</title>
      <link>http://ixday.github.io/post/debian-install/</link>
      <pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/debian-install/</guid>
      <description>That&amp;rsquo;s a fact: I can not install a new system without getting into troubles!
So, here is a small tutorial in which I will aggregate the main issues I encountered and how I solved them.
Creating a bootable USB key on a Mac # plug your USB key, then find it with diskutil list # unmount the usb key (it is mandatory), where X in diskX is the number assigned # to your USB you retrieved with the previous command diskutil unmountDisk /dev/diskX # if you are making a bootable usb key for a Mac run this command, # debian.</description>
    </item>
    
    <item>
      <title>Outside Angular</title>
      <link>http://ixday.github.io/post/outside-angular/</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/outside-angular/</guid>
      <description>There are some cases when angular is accessible but we just want to access a specific service without bootstraping an entire application.
For example, in some tests I can load some fixtures with the $http service, or use $compile for a simple template.
It is pretty simple to do that, but it is not clearly explained in the angular documentation. So here is an example:
// The module ng must be loaded angular.</description>
    </item>
    
    <item>
      <title>HTML5 Boilerplate</title>
      <link>http://ixday.github.io/post/html5-boilerplate/</link>
      <pubDate>Tue, 30 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/html5-boilerplate/</guid>
      <description>Sometimes we only need to have a boilerplate quickly to test it through a browser. We only want to have the basis, and having it working fine.
You can find here a good generator for what you want. But sometimes, having a snippet in the bash prompt can be needed.
So here is an example:
# stop script if something bad happen set -e # unzip need to have a tempfile to extract properly TMPFILE=&amp;quot;/tmp/tempfile.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://ixday.github.io/code/microframework_in_go/part_02/vendor/src/github.com/julienschmidt/httprouter/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/code/microframework_in_go/part_02/vendor/src/github.com/julienschmidt/httprouter/readme/</guid>
      <description>HttpRouter    HttpRouter is a lightweight high performance HTTP request router (also called multiplexer or just mux for short) for Go.
In contrast to the default mux of Go&amp;rsquo;s net/http package, this router supports variables in the routing pattern and matches against the request method. It also scales better.
The router is optimized for high performance and a small memory footprint. It scales well even with very long paths and a large number of routes.</description>
    </item>
    
  </channel>
</rss>