<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash on Not today...</title>
    <link>http://ixday.github.io/tags/bash/</link>
    <description>Recent content in Bash on Not today...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Jul 2016 14:24:57 +0200</lastBuildDate>
    <atom:link href="http://ixday.github.io/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Curl utils</title>
      <link>http://ixday.github.io/post/curl_utils/</link>
      <pubDate>Tue, 19 Jul 2016 14:24:57 +0200</pubDate>
      
      <guid>http://ixday.github.io/post/curl_utils/</guid>
      <description>&lt;p&gt;Here are some options and command I use with &lt;code&gt;curl&lt;/code&gt; when dealing with stuff
I have to develop.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -si &amp;lt;ip&amp;gt; &lt;span class=&#34;c&#34;&gt;# -s is the silent flag, it removes the progress&lt;/span&gt;
              &lt;span class=&#34;c&#34;&gt;# -i displays the headers&lt;/span&gt;

curl -X POST -H &lt;span class=&#34;s2&#34;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -u &lt;span class=&#34;s2&#34;&gt;&amp;quot;admin:admin&amp;quot;&lt;/span&gt; -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt; &amp;lt;ip&amp;gt;
&lt;span class=&#34;c&#34;&gt;# -X set up the http method (here POST)&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# -H set up an header, format is: &amp;quot;header_name: value&amp;quot;&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# -u support for Basic Auth, format is: &amp;quot;user:password&amp;quot;&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# -d set up data to send to the server&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I mostly use those options, the &lt;code&gt;-s&lt;/code&gt; is really interesting when you want to
grep the content.&lt;/p&gt;

&lt;p&gt;So, when testing availability of an http service, I use this snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; curl -si &amp;lt;ip&amp;gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;NR==1||NR==3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; sleep 1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will do kind of a ping for an http service, displaying this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;HTTP/1.1 200 OK
Date: Tue, 19 Jul 2016 12:23:43 GMT
HTTP/1.1 200 OK
Date: Tue, 19 Jul 2016 12:23:45 GMT
HTTP/1.1 200 OK
Date: Tue, 19 Jul 2016 12:23:46 GMT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The status of the http call, and the date of the call has been done.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bash Expansion</title>
      <link>http://ixday.github.io/post/bash_expansion/</link>
      <pubDate>Thu, 20 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/bash_expansion/</guid>
      <description>&lt;p&gt;A small post just to share a useful bashism the
&lt;a href=&#34;http://wiki.bash-hackers.org/syntax/expansion/brace&#34;&gt;Brace Expansion&lt;/a&gt;.
It is really simple to make it works:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; i in &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;1..50&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Hello World &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It will print fifty &amp;ldquo;Hello World&amp;rdquo;. Ok it seems cool but not amazing?
Ok, now the second feature&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo &lt;/span&gt;something/&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;foo,bar&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&amp;gt; something/foo something/bar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Still not amazed, ok now type this one:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cp some_file&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;,.old&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It will copy your file
adding a &lt;code&gt;.old&lt;/code&gt; extension. I do a lot of things like this and it saves me a lot
of time, so think about it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debian Install 3</title>
      <link>http://ixday.github.io/post/debian_install_3/</link>
      <pubDate>Tue, 18 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/debian_install_3/</guid>
      <description>

&lt;p&gt;Today I want to install debian on my personal server.
And I want to crypt the FS using Luks, and add LVM on top.&lt;/p&gt;

&lt;p&gt;I want it to look like that (like this scheme, a lot of reference
come from the &lt;a href=&#34;https://wiki.archlinux.org/index.php/Dm-crypt/Encrypting_an_entire_system&#34;&gt;arch wiki&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;+-----------------------------------------------+ +----------------+
|Logical volume1        | Logical volume2       | |                |
|/dev/vg_ssd/lv_swap    | /dev/vg_ssd/lv_root   | | Boot partition |
|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _| |                |
|                                               | |                |
|        LUKS encrypted partition               | |                |
|               /dev/sda2                       | |   /dev/sda1    |
+-----------------------------------------------+ +----------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;prepare-disks&#34;&gt;Prepare disks&lt;/h2&gt;

&lt;p&gt;I use parted for this configuration, I left 1MB at the start of the device
to be compliant with &lt;code&gt;parted &amp;lt;disk&amp;gt; align-check optimal &amp;lt;partition&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;apt install cryptsetup lvm2

parted /dev/sda mkpart primary 1MB 201MB &lt;span class=&#34;c&#34;&gt;# boot partition&lt;/span&gt;
parted /dev/sda mkpart primary 201MB 100% &lt;span class=&#34;c&#34;&gt;# lvm partition&lt;/span&gt;
parted /dev/sda toggle &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; boot
parted /dev/sda toggle &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; lvm

cryptsetup -c aes-xts-plain -y -s &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; luksFormat /dev/sda2
&lt;span class=&#34;c&#34;&gt;# enter passphrase&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;# this command will open the crypted /dev/sda2 partition and link it to ssd in /dev/mapper&lt;/span&gt;
cryptsetup luksOpen /dev/sda2 ssd

lvm pvcreate /dev/mapper/ssd
lvm vgcreate vg_ssd /dev/mapper/ssd

lvm lvcreate -L 4GB -n swap vg_ssd
lvm lvcreate -l 100%FREE -n root vg_ssd

&lt;span class=&#34;c&#34;&gt;# now format the partitions&lt;/span&gt;
mkfs.ext4 /dev/sda1 &lt;span class=&#34;c&#34;&gt;# boot partition&lt;/span&gt;
mkfs.ext4 /dev/mapper/vg_ssd-lv_root
mkswap /dev/mapper/vg_ssd-lv_swap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;prepare-base-system&#34;&gt;Prepare base system&lt;/h2&gt;

&lt;p&gt;In order to prepare the base system I will use the &lt;code&gt;debootstrap&lt;/code&gt; tool,
which will take care of creating base files. Then I will &lt;code&gt;chroot&lt;/code&gt; in the new
system in order to setup packages and boot initialisation&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# mount new filesystem and debootstrap&lt;/span&gt;
mount /dev/mapper/&amp;lt;vg_name&amp;gt;-root /mnt
mkdir /mnt/boot
mount /dev/sda1 /mnt/boot

debootstrap --arch&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;amd64 stable /mnt

&lt;span class=&#34;c&#34;&gt;# copy somefiles&lt;/span&gt;
cp /etc/resolv.conf /mnt/etc/
cp /etc/network/interfaces /mnt/etc/network

&lt;span class=&#34;c&#34;&gt;# bind and chroot&lt;/span&gt;
mount -o &lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt; /dev /mnt/dev
mount -o &lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt; /dev/pts /mnt/dev/pts
mount -o &lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt; /proc /mnt/proc
mount -o &lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt; /run /mnt/run
mount -o &lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt; /sys /mnt/sys

chroot /mnt/ /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;First install vim! &lt;code&gt;apt-get install vim&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then create the fstab file, I use the UUID notation for this part.
Basically, I run two commands in order to get the needed informations&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ls -l /dev/disks/by-uuid

total 0
lrwxrwxrwx &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; Aug &lt;span class=&#34;m&#34;&gt;19&lt;/span&gt; 12:52 2dfb2c7a-e99b-4073-9267-8e517bc0ce82 -&amp;gt; ../../sda1
lrwxrwxrwx &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; Aug &lt;span class=&#34;m&#34;&gt;19&lt;/span&gt; 13:09 59da986c-ef82-485e-bc8b-f36cc440273c -&amp;gt; ../../sda2
lrwxrwxrwx &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; Aug &lt;span class=&#34;m&#34;&gt;19&lt;/span&gt; 12:53 de3c4d79-beb9-427e-9dea-d25726a5f492 -&amp;gt; ../../dm-2
lrwxrwxrwx &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; Aug &lt;span class=&#34;m&#34;&gt;19&lt;/span&gt; 12:52 f7c9d9f4-671e-45be-97a9-be775196545e -&amp;gt; ../../dm-1
lrwxrwxrwx &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; Aug &lt;span class=&#34;m&#34;&gt;19&lt;/span&gt; 12:40 fcc7394f-6865-4ac5-989a-f6c58dc129d5 -&amp;gt; ../../dm-0

ls -l /dev/mapper
total 0
crw------- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root 10, &lt;span class=&#34;m&#34;&gt;236&lt;/span&gt; Aug &lt;span class=&#34;m&#34;&gt;19&lt;/span&gt; 12:37 control
lrwxrwxrwx &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root       &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; Aug &lt;span class=&#34;m&#34;&gt;19&lt;/span&gt; 12:51 ssd -&amp;gt; ../dm-0
lrwxrwxrwx &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root       &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; Aug &lt;span class=&#34;m&#34;&gt;19&lt;/span&gt; 12:52 vg_ssd-lv_root -&amp;gt; ../dm-2
lrwxrwxrwx &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root       &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; Aug &lt;span class=&#34;m&#34;&gt;19&lt;/span&gt; 12:53 vg_ssd-lv_swap -&amp;gt; ../dm-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which will give me the following /etc/fstab.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;de3c4d79-beb9-427e-9dea-d25726a5f492   /       ext4    defaults    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;  1
&lt;span class=&#34;nv&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;2dfb2c7a-e99b-4073-9267-8e517bc0ce82   /boot   ext4    defaults    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;  2
&lt;span class=&#34;nv&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;f7c9d9f4-671e-45be-97a9-be775196545e   none    swap    defaults    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;  0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Edit the /etc/apt/sources.list file to set up basic packages and update package list: &lt;code&gt;apt-get update&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;deb http://ftp.us.debian.org/debian stable main contrib non-free
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install needed packages&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# install the package&lt;/span&gt;
apt-get install locales console-data keyboard-configuration

&lt;span class=&#34;c&#34;&gt;# set the variables up, select the ones you want with space&lt;/span&gt;
dpkg-reconfigure locales

&lt;span class=&#34;c&#34;&gt;# setup password&lt;/span&gt;
passwd

&lt;span class=&#34;c&#34;&gt;# change hostname&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;suika&amp;quot;&lt;/span&gt; &amp;gt; /etc/hostname

apt-get install lvm2 cryptsetup

&lt;span class=&#34;c&#34;&gt;# this one is specific to my mothercard&lt;/span&gt;
apt-get install firmware-realtek
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;grub&#34;&gt;Grub&lt;/h2&gt;

&lt;p&gt;Now we want to make the new system bootable, to perform this the system needs a kernel
&lt;code&gt;apt-get install linux-image-amd64&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Set up the /etc/crypttab file, which will tell how to map the crypted partition&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# &amp;lt;target name&amp;gt; &amp;lt;source device&amp;gt;         &amp;lt;key file&amp;gt;      &amp;lt;options&amp;gt;&lt;/span&gt;
ssd             /dev/sda2               none            luks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install grub on /dev/sda (on disk, not on partition) &lt;code&gt;apt-get install grub2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Load keyboard on initramfs in order to avoid keyboard layout collision when opening luks volume.&lt;/p&gt;

&lt;p&gt;In file &lt;code&gt;/etc/initramfs-tools/initramfs.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# KEYMAP: [ y | n ]&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# Charger une configuration de clavier à l&amp;#39;étape d&amp;#39;initramfs.&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;KEYMAP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Update initramfs &lt;code&gt;update-initramfs -u&lt;/code&gt; to apply change on initrd.&lt;/p&gt;

&lt;h2 id=&#34;the-end&#34;&gt;The end!&lt;/h2&gt;

&lt;p&gt;Exit the &lt;code&gt;chroot&lt;/code&gt; unmount partitions and reboot on your new fresh installed system.&lt;/p&gt;

&lt;p&gt;If at startup you get an error message like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;  Volume group &amp;quot;vg_ssd&amp;quot; not found
  Skipping volume group vg_ssd
Unable to find LVM volume vg_ssd/lv_root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can look at &lt;a href=&#34;{filename}/2015-08-19.unable-to-find-lvm-volume-with-lvm-on-top-of-luks.md&#34;&gt;this article&lt;/a&gt; which explain how to fix this issue&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debian install 2</title>
      <link>http://ixday.github.io/post/debian_install_2/</link>
      <pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/debian_install_2/</guid>
      <description>

&lt;p&gt;After many days of configuration, I finally complete the installation of my
perfect &amp;ldquo;workstation&amp;rdquo; ;).&lt;/p&gt;

&lt;h2 id=&#34;source-list&#34;&gt;source.list&lt;/h2&gt;

&lt;p&gt;I have to directory for this, first the
&lt;a href=&#34;https://github.com/IxDay/config_files/tree/new_conf/preferences.d&#34;&gt;preferences&lt;/a&gt;,
then the
&lt;a href=&#34;https://github.com/IxDay/config_files/tree/new_conf/source.list.d&#34;&gt;sources.list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just run an &lt;code&gt;aptitude update&lt;/code&gt;, and you will some missing gpg keys, now run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;apt-key adv --recv-keys --keyserver keyserver.ubuntu.com &amp;lt;key_number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To have your keys installed.&lt;/p&gt;

&lt;h2 id=&#34;sudo&#34;&gt;sudo&lt;/h2&gt;

&lt;p&gt;A sudo file is important in order to correctly manage a computer, a simple
&lt;code&gt;aptitude install sudo&lt;/code&gt; will give you the tool.&lt;/p&gt;

&lt;p&gt;Then uncomment the following line&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Allow members of group sudo to execute any command&lt;/span&gt;
%sudo   &lt;span class=&#34;nv&#34;&gt;ALL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=(&lt;/span&gt;ALL:ALL&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; ALL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then add your user to the group sudo &lt;code&gt;gpasswd -a &amp;lt;your_user&amp;gt; sudo&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;install-all-the-packages-o&#34;&gt;install all the packages o/&lt;/h2&gt;

&lt;p&gt;Here is the list of packages I install by default, you can click on them to go
to the proper section
* &lt;a href=&#34;#shell&#34;&gt;rxvt-unicode-256color&lt;/a&gt;
* &lt;a href=&#34;#shell&#34;&gt;zsh&lt;/a&gt;
* &lt;a href=&#34;#vim&#34;&gt;vim-gtk&lt;/a&gt;
* &lt;a href=&#34;#xserver-i3-gtk&#34;&gt;xserver-xorg&lt;/a&gt;, &lt;a href=&#34;#xserver-i3-gtk&#34;&gt;i3&lt;/a&gt;
* &lt;a href=&#34;#xserver-i3-gtk&#34;&gt;fonts-droid&lt;/a&gt;, &lt;a href=&#34;#theming&#34;&gt;feh&lt;/a&gt;
* &lt;a href=&#34;#xserver-i3-gtk&#34;&gt;gtk2-engine-murrine&lt;/a&gt;,
&lt;a href=&#34;#xserver-i3-gtk&#34;&gt;gtk2-engine-pixbuf&lt;/a&gt;, &lt;a href=&#34;#xserver-i3-gtk&#34;&gt;libgtk2.0-0&lt;/a&gt;,
&lt;a href=&#34;#xserver-i3-gtk&#34;&gt;libgtk-3-0&lt;/a&gt;
* &lt;a href=&#34;#notifications&#34;&gt;libnotify-bin&lt;/a&gt;, &lt;a href=&#34;#notifications&#34;&gt;dunst&lt;/a&gt;
* xclip, jq
* &lt;a href=&#34;#git&#34;&gt;git&lt;/a&gt;, &lt;a href=&#34;#git&#34;&gt;keychain&lt;/a&gt;
* &lt;a href=&#34;#google-chrome&#34;&gt;google-chrome-stable&lt;/a&gt;
* &lt;a href=&#34;#docker&#34;&gt;docker.io&lt;/a&gt;
*&lt;/p&gt;

&lt;h2 id=&#34;a-name-shell-a-shell&#34;&gt;&lt;a name=&#34;shell&#34;&gt;&lt;/a&gt; Shell&lt;/h2&gt;

&lt;p&gt;First thing first, a computer is not a real computer without a good shell.
So, I install zsh, then I change my default shell &lt;code&gt;chsh -s $(which zsh)&lt;/code&gt;, and
to finish &lt;a href=&#34;rxvt-unicode-256color&#34;&gt;Oh My Zsh&lt;/a&gt;. I have a custom
&lt;a href=&#34;https://github.com/IxDay/config_files/blob/new_conf/max.zsh-theme&#34;&gt;prompt&lt;/a&gt;
which is placed in &lt;code&gt;.oh-my-zsh/themes/&lt;/code&gt;. The promp is loaded in my
&lt;a href=&#34;https://github.com/IxDay/config_files/blob/new_conf/zshrc&#34;&gt;zshrc file&lt;/a&gt;
and some &lt;a href=&#34;https://github.com/IxDay/config_files/blob/new_conf/zshrc&#34;&gt;aliases&lt;/a&gt;
are sourced for convenience.&lt;/p&gt;

&lt;h2 id=&#34;a-name-vim-a-vim&#34;&gt;&lt;a name=&#34;vim&#34;&gt;&lt;/a&gt; Vim&lt;/h2&gt;

&lt;p&gt;I use vim for quite everything so I have some customization here.
I directly install the gtk version in order to have support for the clipboard
see &lt;a href=&#34;http://stackoverflow.com/questions/11489428/how-to-make-vim-paste-from-and-copy-to-systems-clipboard&#34;&gt;here&lt;/a&gt;
for the explanation.&lt;/p&gt;

&lt;p&gt;First a &lt;a href=&#34;https://github.com/IxDay/config_files/blob/new_conf/vimrc&#34;&gt;.vimrc&lt;/a&gt;,
the plugin system is based on
&lt;a href=&#34;https://github.com/gmarik/Vundle.vim&#34;&gt;Vundle&lt;/a&gt;. To install it just run
&lt;code&gt;git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim&lt;/code&gt;
and &lt;code&gt;vim +PluginInstall +qall&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I also use a global &lt;a href=&#34;https://github.com/IxDay/config_files/blob/new_conf/editorconfig&#34;&gt;editorconfig file&lt;/a&gt;
to keep tidy the maximum of files.&lt;/p&gt;

&lt;h2 id=&#34;a-name-xserver-i3-gtk-a-xserver-i3-and-gtk&#34;&gt;&lt;a name=&#34;xserver-i3-gtk&#34;&gt;&lt;/a&gt; Xserver, i3 and GTK&lt;/h2&gt;

&lt;p&gt;I use i3 for my window manager directly on top of X, all the configuration can
be found easily on my github, here are the files used to configure my desktop.
* The i3 config directory: &lt;a href=&#34;https://github.com/IxDay/config_files/tree/new_conf/i3&#34;&gt;here&lt;/a&gt;
* The i3status config file: &lt;a href=&#34;https://github.com/IxDay/config_files/blob/new_conf/i3status.conf&#34;&gt;here&lt;/a&gt;
* The gtkrc2 file: &lt;a href=&#34;https://github.com/IxDay/config_files/blob/new_conf/gtkrc-2.0&#34;&gt;here&lt;/a&gt;
* The settings.ini file for gtk3: &lt;a href=&#34;https://github.com/IxDay/config_files/blob/new_conf/gtkrc-2.0&#34;&gt;here&lt;/a&gt;
* The Xresource file: &lt;a href=&#34;https://github.com/IxDay/config_files/blob/new_conf/Xresources&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to launch X with i3 the following files are required in your home
directory:
* &lt;a href=&#34;https://github.com/IxDay/config_files/blob/new_conf/zprofile&#34;&gt;.zprofile&lt;/a&gt; is
the first file automatically sourced at the login, it launch the Xserver for
the session.
* &lt;a href=&#34;https://github.com/IxDay/config_files/blob/new_conf/xinitrc&#34;&gt;.xinitrc&lt;/a&gt;
contains the configuration for Xserver, it loads the keyboard layout,
initialize some properties from the &lt;code&gt;.Xresource&lt;/code&gt; file (colors, fonts, etc&amp;hellip;),
and finally load the i3 window manager.&lt;/p&gt;

&lt;p&gt;There is some issues with the dmenu provided by suckless-tools.
In order to support xft font I have reinstalled it from the minos repository,
mentionned &lt;a href=&#34;https://wiki.archlinux.org/index.php/Dmenu#Fonts&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;a-name-notification-a-notification&#34;&gt;&lt;a name=&#34;notification&#34;&gt;&lt;/a&gt;Notification&lt;/h3&gt;

&lt;p&gt;For the notifications I use dunst, which is a notification service, it is
started at i3 startup and will display in a configurable way the notifications
from the system. It needs &lt;code&gt;libnotify-bin&lt;/code&gt; to run, and has a
&lt;a href=&#34;https://github.com/IxDay/config_files/blob/new_conf/dunstrc&#34;&gt;configuration file&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;a-name-theming-a-theming&#34;&gt;&lt;a name=&#34;theming&#34;&gt;&lt;/a&gt;Theming&lt;/h3&gt;

&lt;p&gt;I have installed the &lt;a href=&#34;https://github.com/horst3180/Vertex-theme&#34;&gt;Vertex theme&lt;/a&gt;,
and the &lt;a href=&#34;https://github.com/IxDay/config_files/blob/new_conf/AwOken-2.5.zip&#34;&gt;Awoken White icon pack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the last one some packages are required in order to configure it correctly:
* imagemagick
* zenity&lt;/p&gt;

&lt;p&gt;I also use &lt;code&gt;feh&lt;/code&gt; for managing the desktop wallpaper, it is launched at the
Xserver startup from the &lt;code&gt;.xinitrc&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&#34;a-name-git-a-git&#34;&gt;&lt;a name=&#34;git&#34;&gt;&lt;/a&gt;git&lt;/h2&gt;

&lt;p&gt;The versionning tool!&lt;/p&gt;

&lt;p&gt;My configuration require here the two following files:
* &lt;a href=&#34;https://github.com/IxDay/config_files/blob/new_conf/gitconfig&#34;&gt;gitconfig&lt;/a&gt;
* &lt;a href=&#34;https://github.com/IxDay/config_files/blob/new_conf/gitconfig&#34;&gt;gitignore_global&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After copying those files you can create a rsa key:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh-keygen -t rsa -b &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; -C &lt;span class=&#34;s2&#34;&gt;&amp;quot;your_email@example.com&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And to manage the keys passphrase I use &lt;code&gt;keychain&lt;/code&gt; in an alias&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;alias &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;keychain_default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;eval &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;keychain --eval --agents ssh -Q --quiet id_rsa&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is possible to configure multiple keys, in order to separate some services.
The archlinux wiki has a good article about the SSH keys management:
&lt;a href=&#34;https://wiki.archlinux.org/index.php/SSH_keys&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-name-google-chrome-a-google-chrome&#34;&gt;&lt;a name=&#34;google-chrome&#34;&gt;&lt;/a&gt;Google Chrome&lt;/h2&gt;

&lt;p&gt;Why Chrome, and not Chromium? I had a lot of issues with Chromium, on flash,
with google-talk and so on. It was too complicated and never works,
I wasn&amp;rsquo;t able to figure out why so I give up on this&lt;/p&gt;

&lt;h2 id=&#34;a-name-docker-a-docker&#34;&gt;&lt;a name=&#34;docker&#34;&gt;&lt;/a&gt;Docker&lt;/h2&gt;

&lt;p&gt;Docker is now vastly known by the community of developpers. For the moment,
I do not think it is a good production tool. But, for the development it is
awesome.&lt;/p&gt;

&lt;p&gt;Simply install the package and add your user to the docker group
&lt;code&gt;sudo gpasswd -a &amp;lt;your_user&amp;gt; docker&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Small docker project</title>
      <link>http://ixday.github.io/post/small_tool/</link>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/small_tool/</guid>
      <description>

&lt;p&gt;I really like docker (even if I will look at
&lt;a href=&#34;http://www.freedesktop.org/software/systemd/man/
systemd-nspawn.html&#34;&gt;systemd-nspawn&lt;/a&gt;), and also &lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp&lt;/a&gt;.
So I decided to create a small tool for serving a directory with a livereload.&lt;/p&gt;

&lt;p&gt;The repo is available &lt;a href=&#34;https://github.com/IxDay/docker-html5-boilerplate&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-i-have-learned&#34;&gt;What I have learned&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Docker, especially with boot2docker (I am on MacOSX shame on me), is not
really flexible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;no evaluation for environment variables&lt;/li&gt;
&lt;li&gt;you can not store a variable through multiple run, you will need to do
a oneliner e.g:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  &lt;span class=&#34;c&#34;&gt;# you will need to write this in the Dockerfile&lt;/span&gt;
  RUN &lt;span class=&#34;nv&#34;&gt;TMPFILE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;tempfile&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class=&#34;nv&#34;&gt;$TMPFILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
    rm &lt;span class=&#34;nv&#34;&gt;$TMPFILE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;you cannot build remotely from a custom branch:
&lt;a href=&#34;http://stackoverflow.com/questions/25509828/
can-a-docker-build-use-the-url-of-a-git-branch&#34;&gt;see this post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;accessibility to the container through boot2docker is pretty hard:
&lt;a href=&#34;http://stackoverflow.com/questions/28047809/
docker0-interface-missing-on-osx/&#34;&gt;see this post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;awk is an awesome tool for manipulating strings and console outputs.
Best one hour investment so far. If you have to write bash scripts, awk is
definitely a best to know tool.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;nodejs is definitely a hell for developers but is the only platform for
frontend dev. Here are some issues I have gone through:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bug in collecting interfaces which forced me to use a syscall:
&lt;a href=&#34;https://github.com/joyent/node/issues/9029&#34;&gt;bug report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;npm ecosystem is messy. You will have to test many plugin, which does
quite the same thing, to find the one with &lt;em&gt;THE&lt;/em&gt; option you need.
And finally find that the lib is 10 lines long and wraps another lib.&lt;/li&gt;
&lt;li&gt;no good packaging, which leads to a custom installation path,
thanks &lt;a href=&#34;https://nodesource.com/blog/
nodejs-v012-iojs-and-the-nodesource-linux-repositories&#34;&gt;this blog post&lt;/a&gt; for the help.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;gulpjs is way better than grunt and must be ported to other languages,
really excited about the 4.0 version coming soon.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how-i-can-improve&#34;&gt;How I can improve&lt;/h2&gt;

&lt;p&gt;The tool is currently working, I am thinking of adding a markdown compiler in
the chain because I really use markdown all the time.&lt;/p&gt;

&lt;p&gt;I still have to test it a bit to be sure it is okay to make a release
(first thing I release yay \o/)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ssh, rsync and fswatch</title>
      <link>http://ixday.github.io/post/rsync_fswatch/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/rsync_fswatch/</guid>
      <description>

&lt;p&gt;Sometimes I just can&amp;rsquo;t work on a local environment (particular architecture,
particular services, local configuration too complex, etc&amp;hellip;).
So, I have to synchronize my local directory with a remote one and test the
web interface on my local machine.&lt;/p&gt;

&lt;h2 id=&#34;ssh&#34;&gt;ssh&lt;/h2&gt;

&lt;p&gt;First, ssh! For this I need a ssh connection to the remote server, here I use
a particular ssh key.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh -i ~/.ssh/my_ssh.key mylogin@192.168.0.1

&lt;span class=&#34;c&#34;&gt;# urls also work&lt;/span&gt;
ssh -i ~/.ssh/my_ssh.key mylogin@my.url.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Okay, at this moment we can use a config file for ssh: &lt;code&gt;$HOME/.ssh/config&lt;/code&gt; :)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Host 192.168.0.1 my.url.com
   user mylogin
   IdentityFile ~/.ssh/my_ssh.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The CLI is now:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# with IP&lt;/span&gt;
ssh 192.168.0.1

&lt;span class=&#34;c&#34;&gt;# with url&lt;/span&gt;
ssh my.url.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I have a connection but now I want to share my dev server on the remote host to
my local web browser. For that I will use the &lt;code&gt;-L&lt;/code&gt; of ssh, this will forward
the local port with the remote one.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh -L 5000:localhost:9999 192.168.0.1 &lt;span class=&#34;c&#34;&gt;# same as before it works with url&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command will connect my local port 5000 to the port 9999 of the remote
host local interface (so I do not have to open another port on the remote
except the ssh one)&lt;/p&gt;

&lt;h2 id=&#34;rsync&#34;&gt;rsync&lt;/h2&gt;

&lt;p&gt;Then, we will use rsync to send files to our server&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rsync -avz -e &lt;span class=&#34;s2&#34;&gt;&amp;quot;ssh&amp;quot;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt;/folder my.url.com:/home/username/remote_folder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;-a the archive option (recursive, preserve links, times, permissions,
group, owner, devices files&lt;/li&gt;
&lt;li&gt;-v the verbose option&lt;/li&gt;
&lt;li&gt;-z the compress option&lt;/li&gt;
&lt;li&gt;-e remote shell to use (basically we specify here all the ssh configuration
needed. If we didn&amp;rsquo;t had the .ssh/config file the command line should have been
&lt;code&gt;rsync -avz -e &amp;quot;ssh -i ~/.ssh/my_ssh.key&amp;quot; local/folder
mylogin@my.url.com:/home/username/remote_folder&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is possible to not want to synchronize all files
(.git folder, generated files, etc&amp;hellip;), so we will use the &lt;code&gt;--exclude-from&lt;/code&gt;
option. In the folder we want to synchronize, we create a file &lt;code&gt;exclude.txt&lt;/code&gt;
(the name is not important), then we fill it with the needed files or folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;.git
/static
*.pyc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Take care that the &lt;code&gt;/&lt;/code&gt; apply at the point where the rsync command is launched.
So it will not have the same effect if we change the working directory.&lt;/p&gt;

&lt;p&gt;The command will look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# move to working dir&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd local&lt;/span&gt;/folder

&lt;span class=&#34;nv&#34;&gt;remote_loc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;my.url.com:/home/username/remote_folder&amp;quot;&lt;/span&gt;

rsync -avz -e &lt;span class=&#34;s2&#34;&gt;&amp;quot;ssh&amp;quot;&lt;/span&gt; . &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;remote_loc&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; --exclude-from &lt;span class=&#34;s1&#34;&gt;&amp;#39;exclude.txt&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;fswatch-or-inotify&#34;&gt;fswatch (or inotify)&lt;/h2&gt;

&lt;p&gt;I also want my folder to synchronize automatically with the remote one when a
file change. For this purpose I will use &lt;code&gt;fswatch&lt;/code&gt; because I use MacOS
(shame on me), &lt;code&gt;inotify&lt;/code&gt; can be use on linux platforms.&lt;/p&gt;

&lt;p&gt;First, check the changes on my working directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;fswatch -e .git/ -e .pyc -e &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/static .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here I use &lt;code&gt;$(pwd)&lt;/code&gt; in order to not catch the &lt;code&gt;/static&lt;/code&gt; folder at the root of
the folder, but keep the nested one included. This catch the same files as the
exclude file from rsync. At this point I haven&amp;rsquo;t found any solution to unify
those two commands.&lt;/p&gt;

&lt;h2 id=&#34;xargs&#34;&gt;xargs&lt;/h2&gt;

&lt;p&gt;The last piece needed is xargs, this will read stdin and execute a command on
each entry.&lt;/p&gt;

&lt;h2 id=&#34;all-together&#34;&gt;All together&lt;/h2&gt;

&lt;p&gt;Here is my final command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd local&lt;/span&gt;/folder

&lt;span class=&#34;nv&#34;&gt;remote_loc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;my.url.com:/home/username/remote_folder&amp;quot;&lt;/span&gt;

fswatch -0 -o -e .git/ -e .pyc -e &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/static . &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
xargs -0 -I &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; rsync -avz -e &lt;span class=&#34;s2&#34;&gt;&amp;quot;ssh&amp;quot;&lt;/span&gt; . &lt;span class=&#34;nv&#34;&gt;$remote_loc&lt;/span&gt; --exclude-from &lt;span class=&#34;s1&#34;&gt;&amp;#39;exclude.txt&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;The option &lt;code&gt;-0&lt;/code&gt; indicates that fswatch will use &lt;code&gt;\0&lt;/code&gt; as a line separator.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The option &lt;code&gt;-o&lt;/code&gt; will only indicates how many files have been modified,
has long has I do not need the filename to perform the command.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The command xargs take the same option &lt;code&gt;-0&lt;/code&gt; so it will accept &lt;code&gt;\0&lt;/code&gt; as the
separator between each command.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The &lt;code&gt;-I {}&lt;/code&gt; option will tell xargs that the
caught at first will be injected in the command at the place of &lt;code&gt;{}&lt;/code&gt;
(this is the same as the -exec command in find). We do not use it because
rsync will take care to check which file has changed, this is a trick to avoid
xargs to complain.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Curl for REST</title>
      <link>http://ixday.github.io/post/curl_for_rest/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/curl_for_rest/</guid>
      <description>&lt;p&gt;It has been a long time since the last post. But today, I will just show two
tools I use for debugging my REST APIs.&lt;/p&gt;

&lt;p&gt;First one is the well known &lt;a href=&#34;http://curl.haxx.se/docs/manpage.html&#34;&gt;curl&lt;/a&gt; and
the second one is &lt;a href=&#34;http://stedolan.github.io/jq/manual/&#34;&gt;jq&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One important feature of curl is its hability to load external files for datas
with &lt;code&gt;@&lt;/code&gt; before file name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -X POST -H &lt;span class=&#34;s2&#34;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d @filepath
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then you can remove the progress bar by adding &lt;code&gt;-s&lt;/code&gt; in the options&lt;/p&gt;

&lt;p&gt;Finally, you can use jq for parsing the output with a request syntax, here is
what the final line looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -X POST -H &lt;span class=&#34;s2&#34;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -s -d @filepath &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq &lt;span class=&#34;s1&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is a small article but I just wanted to show that those tools are really
great, we do not need complex software for this. I prefer using simple cli
because it gives a better understanding on what we are doing, and on what we
are relying on.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bash Script</title>
      <link>http://ixday.github.io/post/bash-script/</link>
      <pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/bash-script/</guid>
      <description>

&lt;p&gt;Writting a bash script is kind of a complicated task, there is a strict
syntax, multiple external tools, and some tricks which depends on the version
and in some cases on the distribution itself (for example, grep is not the same
either you are on BSD or Debian).&lt;/p&gt;

&lt;p&gt;In this article I will talk about four code habits which can improve
the maintainability of your shell scripts&lt;/p&gt;

&lt;h3 id=&#34;double-quotes&#34;&gt;Double quotes&lt;/h3&gt;

&lt;p&gt;Everyone who already used a bash script will tell you to mark every variable
reading with double quotes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# like this&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The question is why do we have to mark them, to show that just a little example,
run the following script&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;LS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;ls *&amp;quot;&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Not Quoted&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$LS&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Quoted&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$LS&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see there is a huge difference between the two versions, in fact,
if there is no double quotes, the variable is subject to word splitting and
file globbing see &lt;a href=&#34;http://mywiki.wooledge.org/BashPitfalls#echo%5f.24foo&#34;&gt;here&lt;/a&gt;
for further informations. This can lead to major errors and
failures.&lt;/p&gt;

&lt;h3 id=&#34;the-braquets-notation&#34;&gt;The braquets notation&lt;/h3&gt;

&lt;p&gt;To display a variable there is two notations&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;FOO&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$FOO&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FOO&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These two notations displays the same thing, so why do we need the second one?
This notation is here to clarify an ambiguity, because variables can be used
in a string interpolation it can lead to a miscomprehension.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;FO&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;fo&amp;quot;&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;because &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$FOo&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; you &amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;because &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FO&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;o you&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see the result of the previous script the first line does not write
what is contained into the variable, because bash interpreter try to display
the content of the variable &lt;code&gt;FOo&lt;/code&gt; which does not exist.&lt;/p&gt;

&lt;h3 id=&#34;the-set-command&#34;&gt;The set command&lt;/h3&gt;

&lt;p&gt;At the any level in your script you can use the &lt;code&gt;set&lt;/code&gt; command,
this command is powerful because it allows some extra behaviour in your shell
script:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set -e&lt;/code&gt; Will stop the script if an error occurs&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -e

&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;this command exist&amp;quot;&lt;/span&gt;
ls
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;hope this one not&amp;quot;&lt;/span&gt;
foo
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;this will not be displayed&amp;quot;&lt;/span&gt;
ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Try removing the second line and see what happened. Sometime this behaviour is
needed, sometime not.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set -x&lt;/code&gt; Will display the line running and evaluate the variables&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -x

&lt;span class=&#34;nv&#34;&gt;FOO&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;BAR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$FOO&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will display&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;+ &lt;span class=&#34;nv&#34;&gt;FOO&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;foo
+ &lt;span class=&#34;nv&#34;&gt;BAR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;command-return-code-testing&#34;&gt;Command return code testing&lt;/h3&gt;

&lt;p&gt;There is a simple way to test some command return in bash if we do not need the
result&lt;/p&gt;

&lt;p&gt;Here is the common way to do that&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;RESULT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;grep &lt;span class=&#34;s2&#34;&gt;&amp;quot;toto&amp;quot;&lt;/span&gt; /dev/null&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$?&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Command failed&amp;quot;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;RESULT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;ls /dev/null&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; ! &lt;span class=&#34;nv&#34;&gt;$?&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Command succeed&amp;quot;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But if we do not want the result, and just want to test some command return,
here is the simple way to perform that&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;quot;toto&amp;quot;&lt;/span&gt; /dev/null
&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Command succeed&amp;quot;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Command failed&amp;quot;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Debian Install</title>
      <link>http://ixday.github.io/post/debian-install/</link>
      <pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/debian-install/</guid>
      <description>

&lt;p&gt;That&amp;rsquo;s a fact: I can not install a new system without getting into troubles!&lt;/p&gt;

&lt;p&gt;So, here is a small tutorial in which I will aggregate the main issues I
encountered and how I solved them.&lt;/p&gt;

&lt;h3 id=&#34;creating-a-bootable-usb-key-on-a-mac&#34;&gt;Creating a bootable USB key on a Mac&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# plug your USB key, then find it with&lt;/span&gt;
diskutil list

&lt;span class=&#34;c&#34;&gt;# unmount the usb key (it is mandatory), where X in diskX is the number assigned&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# to your USB you retrieved with the previous command&lt;/span&gt;
diskutil unmountDisk /dev/diskX

&lt;span class=&#34;c&#34;&gt;# if you are making a bootable usb key for a Mac run this command,&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# debian.img will be the output and debian-testing-amd64-CD-1.iso is&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# the iso you retrieved from internet https://www.debian.org/CD/http-ftp/&lt;/span&gt;
hdiutil convert -format UDRW -o debian.img debian-testing-amd64-CD-1.iso

&lt;span class=&#34;c&#34;&gt;# if you are making a Mac bootable usb key (X is still the disk number)&lt;/span&gt;
sudo dd &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./debian.img.dmg &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/dev/rdiskX &lt;span class=&#34;nv&#34;&gt;bs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1m

&lt;span class=&#34;c&#34;&gt;# otherwise (X is still the disk number)&lt;/span&gt;
sudo dd &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./debian-testing-amd64-CD-1.iso &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/dev/rdiskX &lt;span class=&#34;nv&#34;&gt;bs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1m

&lt;span class=&#34;c&#34;&gt;# to finish eject&lt;/span&gt;
hdiutil eject /dev/diskX
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;messing-up-during-the-installation&#34;&gt;Messing up during the installation&lt;/h3&gt;

&lt;p&gt;I use to have a lot of issues during the installation, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No installable kernel&lt;/li&gt;
&lt;li&gt;Can not install grub&lt;/li&gt;
&lt;li&gt;Whatever can happen during the installation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, it is possible to fix that during the installation process.
At the final step, just before the reboot press ctrl+alt+f3, then when prompted
press enter and you will get into a shell. It is also possible to perform that
with the Advanced Options -&amp;gt; Rescue Mode.&lt;/p&gt;

&lt;p&gt;To fix the errors we will chroot into the new system and add the missing part by
hand.&lt;/p&gt;

&lt;h4 id=&#34;chroot-into-an-other-system&#34;&gt;Chroot into an other system&lt;/h4&gt;

&lt;p&gt;First find the partition on which your system has been installed&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# parted will print you the partition of each device&lt;/span&gt;
parted /dev/sda print
parted /dev/sdb print
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once the partition is found you have to mount it&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# create a directory for the mounted partition&lt;/span&gt;
mkdir /mnt/sda1

&lt;span class=&#34;c&#34;&gt;# mount it&lt;/span&gt;
mount /dev/sda1 /mnt/sda1

&lt;span class=&#34;c&#34;&gt;# bind the main parts&lt;/span&gt;
mount -o &lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt; /dev /mnt/sda1/dev
mount -o &lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt; /dev/pts /mnt/sda1/dev/pts
mount -o &lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt; /proc /mnt/sda1/proc
mount -o &lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt; /run /mnt/sda1/run
mount -o &lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt; /sys /mnt/sda1/sys

&lt;span class=&#34;c&#34;&gt;# chroot in the system&lt;/span&gt;
chroot /mnt/sda1 /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;dealing-with-the-system&#34;&gt;Dealing with the system&lt;/h4&gt;

&lt;p&gt;Actualize the file &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; with the following
&lt;a href=&#34;http://debgen.simplylinux.ch/&#34;&gt;site&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# update&lt;/span&gt;
apt-get update

&lt;span class=&#34;c&#34;&gt;# install the kernel, for me it is an amd64 architecture, to find yours just run&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# apt-cache search linux-image and choose the one for your needs&lt;/span&gt;
apt-get install linux-image-amd64

&lt;span class=&#34;c&#34;&gt;# install grub2, when installing it will ask for the device on which you want&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# grub to be installed, choose the device not the partition, here it will be&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# /dev/sda&lt;/span&gt;
apt-get install grub2

&lt;span class=&#34;c&#34;&gt;# update grub just in case&lt;/span&gt;
update-grub

&lt;span class=&#34;c&#34;&gt;# do not forget to initialize the password&lt;/span&gt;
passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First step is done, and you will now be able to boot on your new system&lt;/p&gt;

&lt;h3 id=&#34;rebooting-and-first-configuration&#34;&gt;Rebooting and first configuration&lt;/h3&gt;

&lt;h4 id=&#34;set-up-the-locales&#34;&gt;Set up the locales&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# install the package&lt;/span&gt;
apt-get install locales

&lt;span class=&#34;c&#34;&gt;# set the variables up, select the ones you want with space&lt;/span&gt;
dpkg-reconfigure locales
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;set-up-the-keyboard&#34;&gt;Set up the keyboard&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# install the package&lt;/span&gt;
apt-get install console-data

&lt;span class=&#34;c&#34;&gt;# for me it is a french keyboard&lt;/span&gt;
loadkeys fr-latin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Test if the configuration works for you, then you can save it by adding to
&lt;code&gt;/etc/rc.locals&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# the path to the keymap is displayed when you use the loadkeys command&lt;/span&gt;
/usr/bin/loadkeys /usr/share/keymaps/i386/azerty/fr-latin9.kmap.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;a-name-users-a-users&#34;&gt;&lt;a name=&#34;users&#34;&gt;&lt;/a&gt;Users&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# install sudo&lt;/span&gt;
apt-get install sudo

&lt;span class=&#34;c&#34;&gt;# add new user called foo with a home folder (-m),&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# users as first group (-g group_name), sudo as additionnal group (-G group_name)&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# and bash as login shell&lt;/span&gt;
useradd -m -g users -G sudo -s /bin/bash foo

&lt;span class=&#34;c&#34;&gt;# change user password&lt;/span&gt;
passwd foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;display-manager&#34;&gt;Display Manager&lt;/h3&gt;

&lt;p&gt;Here I will use i3 on top of xorg&lt;/p&gt;

&lt;h4 id=&#34;init&#34;&gt;Init&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# install xorg and i3&lt;/span&gt;
apt-get install xorg i3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create a file at the root of the user &lt;code&gt;~/.bash_profile&lt;/code&gt; if you are using bash
&lt;code&gt;~/.zprofile&lt;/code&gt; if using zsh, if you have another login shell please refer to the
dedicated doc.&lt;/p&gt;

&lt;p&gt;In our configuration it will be bash due to the &lt;a href=&#34;#users&#34;&gt;user creation&lt;/a&gt;.
Add &lt;code&gt;startx&lt;/code&gt; at any point of the file. This will launch xserver at login.
Then we want to launch i3. To do that add &lt;code&gt;exec i3&lt;/code&gt; at any point of the file
&lt;code&gt;~/.xinitrc&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;set-x-keyboard-layout&#34;&gt;Set X keyboard layout&lt;/h4&gt;

&lt;p&gt;To have the correct layout for X add the above commands in your &lt;code&gt;.xinitrc&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# reset the options&lt;/span&gt;
setxkbmap -option

&lt;span class=&#34;c&#34;&gt;# I only add the option to quit X by pressing ctrl+alt+backspace&lt;/span&gt;
setxkbmap -layout fr -variant latin9 -option terminate:ctrl_alt_bksp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To see all available options you can type &lt;code&gt;localectl list-x11-keymap-options&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To see current configuration type &lt;code&gt;setxkbmap -query&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the basic configuration for my linux. Trying to allocate the main issues
I had.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTML5 Boilerplate</title>
      <link>http://ixday.github.io/post/html5-boilerplate/</link>
      <pubDate>Tue, 30 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/html5-boilerplate/</guid>
      <description>&lt;p&gt;Sometimes we only need to have a boilerplate quickly to test it through a
browser. We only want to have the basis, and having it working fine.&lt;/p&gt;

&lt;p&gt;You can find &lt;a href=&#34;http://www.initializr.com/&#34;&gt;here&lt;/a&gt; a good generator for what you
want. But sometimes, having a snippet in the bash prompt can be needed.&lt;/p&gt;

&lt;p&gt;So here is an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# stop script if something bad happen&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -e

&lt;span class=&#34;c&#34;&gt;# unzip need to have a tempfile to extract properly&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;TMPFILE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;/tmp/tempfile.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;date +%s&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;PWD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;DEST&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;# here is the link of my configuration, but you can easily create yours&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;URL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;http://www.initializr.com/builder?h5bp-content&amp;amp;html5shiv&amp;amp;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;URL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$URL&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;quot;h5bp-css&amp;amp;h5bp-csshelpers&amp;amp;h5bp-mediaqueryprint&amp;amp;h5bp-mediaqueries&amp;amp;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;URL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$URL&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;quot;simplehtmltag&amp;amp;izr-emptyscript&amp;quot;&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# string concatenation example&lt;/span&gt;

curl -o &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$TMPFILE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$URL&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; 2&amp;gt; /dev/null

&lt;span class=&#34;c&#34;&gt;# if argument is provided, move to the specified directory&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt;  -z &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$DEST&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;c&#34;&gt;# do not display what has been inflated&lt;/span&gt;
    unzip -qq -d &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$TMPFILE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
    rm &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$TMPFILE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;

    &lt;span class=&#34;c&#34;&gt;# if the path provided is a file warn the user and exit&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; -f &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$DEST&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$DEST&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; already exists and is a file&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exit &lt;/span&gt;1
    &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;

    &lt;span class=&#34;c&#34;&gt;# if the directory is not empty warn the user and exit&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; -d &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$DEST&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ! -z &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;ls -A &lt;span class=&#34;nv&#34;&gt;$DIR&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$DEST&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; is not empty&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exit &lt;/span&gt;1
    &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;

    &lt;span class=&#34;c&#34;&gt;# if the directory does not exist, we create it&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; ! -a &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$DEST&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
        mkdir -p &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$DEST&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;

    unzip -qq -d &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$DEST&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$TMPFILE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;

    &lt;span class=&#34;c&#34;&gt;#then we move the content to the directory&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; f in &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$DEST&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;/initializr/*
    &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
        mv &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$DEST&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;

    &lt;span class=&#34;c&#34;&gt;# delete the other files&lt;/span&gt;
    rm &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$TMPFILE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
    rmdir &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$DEST&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/initializr&amp;quot;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;it is also possible to create a sample on github or whatever, do not forget that
automation will lead to time saving (maybe, &amp;hellip;sometimes).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>