<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cli on Not today...</title>
    <link>https://ixday.github.io/tags/cli/</link>
    <description>Recent content in cli on Not today...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ixday.github.io/tags/cli/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Viper Multi Config</title>
      <link>https://ixday.github.io/post/viper_multi_config/</link>
      <pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/viper_multi_config/</guid>
      <description>This post will explain how to overload configurations in Golang using viper and cobra libraries. The use case may be a niche one, but I find this to be an easy to understand and pretty clear way to do configuration merge.
The problem and the expectation I am deploying most of my application on Kubernetes nowadays (I also moved my personal infrastructure to it a few weeks ago). This solution come with a big tooling ecosystem and a really opiniated way to deploy.</description>
    </item>
    
    <item>
      <title>KVM with Docker bridge</title>
      <link>https://ixday.github.io/post/kvm_docker/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/kvm_docker/</guid>
      <description>This post will explain how to use the docker bridge as a KVM bridge. In this post I will use the Qemu command line to manage my VMs.
There is a lot of ways to connect a VM to the internet. The most common one is via network address translation (NAT). This method has a few down side, the main one being that you need to explicitely configure port forwarding for your VM services to be reachable from the host.</description>
    </item>
    
    <item>
      <title>Kvm Hello World</title>
      <link>https://ixday.github.io/post/kvm_hello_world/</link>
      <pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/kvm_hello_world/</guid>
      <description>Let&amp;rsquo;s start a small serie of post on KVM. It is a tool I sometime need to use when Docker is too simple for the problem at hand, or if I really need virtualization (to emulate another arch or a totally different system).
I will start by giving a series of snippets to quick start your KVM usage. I am doing this because I often struggle to retrieve simple information when I want to come back on this kind of technology.</description>
    </item>
    
    <item>
      <title>Socat, Telnet and Unix sockets</title>
      <link>https://ixday.github.io/post/socat_telnet/</link>
      <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/socat_telnet/</guid>
      <description>Once in a while I use telnet, mostly to check if a port is open (the infamous telnet localhost 22) and sometimes to send a random http request.
However, telnet has a few caveats which are:
not able to read from stdin not able to deal with https not able to handle unix sockets Those limitations are pushing me towards the use of the socat utility. Here I will show a few situations in which I am now using socat.</description>
    </item>
    
    <item>
      <title>Terraform retrieve sensible data</title>
      <link>https://ixday.github.io/post/terraform_sensitive/</link>
      <pubDate>Sat, 03 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/terraform_sensitive/</guid>
      <description>Another post on Terraform. Here to share a little snippet to retrieve some data from your Terraform state. When you are dealing with some Terraform resources or writing modules you may encounter the sensitive keyword/value (here is a bit of doc). This is handy to avoid leaking some data, but from time to time you may want to extract one of those.
Code For this article let&amp;rsquo;s imagine I am creating an aws_iam_user for another team to access some specific resources.</description>
    </item>
    
    <item>
      <title>Debug Terraform</title>
      <link>https://ixday.github.io/post/debug_terraform/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/debug_terraform/</guid>
      <description>How to easily debug Terraform? This was one of my biggest problem when dealing with the tool. I followed instructions to use some output ressources or browse the &amp;ldquo;debug&amp;rdquo; logs. Disclaimer: none of it was working properly.
So here is what I am actually doing and I am perfectly happy with. Oh! And just before starting to enable debug logs you have to pass the environment variable TF_LOG=debug (because there is no man page and it is not written in the --help content).</description>
    </item>
    
    <item>
      <title>The wild kubectl logs issue</title>
      <link>https://ixday.github.io/post/kubectl_logs/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/kubectl_logs/</guid>
      <description>A quick post to present one of my finding during my Kubernetes journey. It may help people since it took me some time to find this out. I am currently using Kubernetes a lot for my job. I am part of the infrastructure team and need to debug some setups. I am using kubectl logs extensively and I found a few interesting options I&amp;rsquo;d like to share.
Most of the time you will have multiple containers handling requests and you want to see what is happening in all of them.</description>
    </item>
    
    <item>
      <title>Gopass</title>
      <link>https://ixday.github.io/post/gopass/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/gopass/</guid>
      <description>A pretty good security advice would be to never write down a password unencrypted on disk. This can be pretty tricky to achieve, especially on personal and development environments. So let me introduce gopass which is a tool aiming to help with this problem.
First of all, let me say it right away, the CLI interface is not that good. Took me a lot of time to set things properly as options may be cryptic and behavior is not obvious as first sight.</description>
    </item>
    
    <item>
      <title>Git amend history</title>
      <link>https://ixday.github.io/post/git_patch/</link>
      <pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/git_patch/</guid>
      <description>This post is a simple copy of this answer, go there to see the original.
As I am using git extensively in my day to day life/job, I encountered the issue to simply amend a commit which is already two or three commits before the current one.
I could use git rebase -i with some stashing to apply the changes at the proper moment. This is most of the time a viable solution, however, it may be complicated because I have too much new code and stashing would be complicated.</description>
    </item>
    
    <item>
      <title>Simple HTTPs server</title>
      <link>https://ixday.github.io/post/simple_https/</link>
      <pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/simple_https/</guid>
      <description>Sometimes we need to create a simple server saying hello through https. Here is a simple snippet to achieve this in a shell.
# first we generate a self signed certificate for domain foo openssl req -new -newkey rsa:4096 -x509 -sha256 -days 365 -nodes \ -out foo.crt -keyout foo.key -subj &amp;#34;/CN=foo.com&amp;#34; # then we start a server using socat sudo socat &amp;#34;ssl-l:443,cert=foo.crt,key=foo.key,verify=0,fork,reuseaddr&amp;#34; \ SYSTEM:&amp;#34;echo HTTP/1.0 200; echo Content-Type\: text/plain; echo; echo Hello World\!</description>
    </item>
    
    <item>
      <title>direnv</title>
      <link>https://ixday.github.io/post/direnv/</link>
      <pubDate>Thu, 27 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/direnv/</guid>
      <description>I recently discovered the direnv project. Which helped me a lot for setting up my development environments. I will share a bit of things I use in my daily basis.
Python projects This is well documented but here is what I use in python projects to set up a default virtualenv.
layout python That&amp;rsquo;s it! It sets up a virtualenv in your .direnv directory, and load the updated PATH.
Golang projects This one is a bit trickier.</description>
    </item>
    
    <item>
      <title>Bash Shortcuts</title>
      <link>https://ixday.github.io/post/bash_shortcuts/</link>
      <pubDate>Wed, 20 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/bash_shortcuts/</guid>
      <description>Here is just a small reminder of common bash shortcuts for everyday use:
Ctrl + A Go to the beginning of the line you are currently typing on Ctrl + E Go to the end of the line you are currently typing on Ctrl + L Clears the Screen, similar to the clear command Ctrl + U Clears the line before the cursor position. If you are at the end of the line, clears the entire line.</description>
    </item>
    
    <item>
      <title>Pytest command line</title>
      <link>https://ixday.github.io/post/pytest_command_line/</link>
      <pubDate>Wed, 16 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/pytest_command_line/</guid>
      <description>I have recently dug into pytest documentation, and moreover into the command line arguments and I finally found a better workflow for running tests while I develop.
Here is the command I run when I just made some devs: py.test -xvvvs --tb=line --pdb
-x will stop execution on first failue, useful when debugging tests in order of appearance (recommended) -vvv will display current test path (reuasable in py.test), the path will avoid to rerun all the previous tests before going to the one you are currently working on.</description>
    </item>
    
    <item>
      <title>Ansible</title>
      <link>https://ixday.github.io/post/ansible/</link>
      <pubDate>Sat, 03 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/ansible/</guid>
      <description>I have a home media server, and I spent a lot of time configuring, testing and installing on it. But I was never really satisfied by the way I had to perform the installation (which happens way too often).
And I recently discovered Ansible, which is a tool for doing a lot of stuff with a server (configuration, run repetitive command, installation) over ssh.
I really loved experienced with it, it does not require a lot of dependencies on the targeted server, and can be easily run.</description>
    </item>
    
    <item>
      <title>Bash Expansion</title>
      <link>https://ixday.github.io/post/bash_expansion/</link>
      <pubDate>Thu, 20 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/bash_expansion/</guid>
      <description>A small post just to share a useful bashism the Brace Expansion. It is really simple to make it works:
for i in {1..50} do echo &amp;#34;Hello World $i&amp;#34; done It will print fifty &amp;ldquo;Hello World&amp;rdquo;. Ok it seems cool but not amazing? Ok, now the second feature
echo something/{foo,bar} &amp;gt; something/foo something/bar Still not amazed, ok now type this one:
cp some_file{,.old} It will copy your file adding a .</description>
    </item>
    
    <item>
      <title>Curl for REST</title>
      <link>https://ixday.github.io/post/curl_for_rest/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ixday.github.io/post/curl_for_rest/</guid>
      <description>It has been a long time since the last post. But today, I will just show two tools I use for debugging my REST APIs.
First one is the well known curl and the second one is jq.
One important feature of curl is its hability to load external files for datas with @ before file name:
curl -X POST -H &amp;#34;Content-Type: application/json&amp;#34; -d @filepath Then you can remove the progress bar by adding -s in the options</description>
    </item>
    
  </channel>
</rss>
