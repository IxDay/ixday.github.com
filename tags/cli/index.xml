<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cli on Not today...</title>
    <link>http://ixday.github.io/tags/cli/index.xml</link>
    <description>Recent content in Cli on Not today...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://ixday.github.io/tags/cli/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bash Shortcuts</title>
      <link>http://ixday.github.io/post/bash_shortcuts/</link>
      <pubDate>Wed, 20 Jul 2016 09:13:58 +0200</pubDate>
      
      <guid>http://ixday.github.io/post/bash_shortcuts/</guid>
      <description>&lt;p&gt;Here is just a small reminder of common bash shortcuts for everyday use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;Ctrl + A  Go to the beginning of the line you are currently typing on
Ctrl + E  Go to the end of the line you are currently typing on
Ctrl + L  Clears the Screen, similar to the clear command
Ctrl + U  Clears the line before the cursor position. If you are at the end of the line, clears the entire line.
Ctrl + H  Same as backspace
Ctrl + R  Letâ€™s you search through previously used commands
Ctrl + C  Kill whatever you are running
Ctrl + D  Exit the current shell
Ctrl + Z  Puts whatever you are running into a suspended background process. fg restores it.
Ctrl + W  Delete the word before the cursor
Ctrl + K  Clear the line after the cursor
Ctrl + T  Swap the last two characters before the cursor
Esc + T   Swap the last two words before the cursor
Alt + F   Move cursor forward one word on the current line
Alt + B   Move cursor backward one word on the current line
Tab       Auto-complete files and folder names
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This table comes from &lt;a href=&#34;http://www.howtogeek.com/howto/ubuntu/keyboard-shortcuts-for-bash-command-shell-for-ubuntu-debian-suse-redhat-linux-etc/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pytest command line</title>
      <link>http://ixday.github.io/post/pytest_command_line/</link>
      <pubDate>Wed, 16 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/pytest_command_line/</guid>
      <description>

&lt;p&gt;I have recently dug into pytest documentation, and moreover into
the command line arguments and I finally found a better workflow
for running tests while I develop.&lt;/p&gt;

&lt;p&gt;Here is the command I run when I just made some devs:
&lt;code&gt;py.test -xvvvs --tb=line --pdb&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-x&lt;/strong&gt; will stop execution on first failue, useful when debugging tests
in order of appearance (recommended)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-vvv&lt;/strong&gt; will display current test path (reuasable in py.test), the
path will avoid to rerun all the previous tests before going to the one
you are currently working on. In addition, the verbose flags will display
a full diff of the assert error. This will help troubleshoot from where
the error is coming&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;tb=line&lt;/strong&gt; will only display the last line of the unhandled exception
which make the test fail. I use this because in general the exception
trace is not really relevant, as we already know what test is running
and the name of the error.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;pdb&lt;/strong&gt; this one is gold, it will enter pdb on fail, and if you have
&lt;a href=&#34;https://pypi.python.org/pypi/pdbpp/&#34;&gt;pdbpp&lt;/a&gt; installed, this will be
a real debugger :p&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second command I usually ran is: &lt;code&gt;py.test -v --tb=line --cov=src --cov-report=html&lt;/code&gt;.
This one is my code coverage command. I run it on small changes or after the first
command described here, in order to check that my coverage has evolved.
I put a &lt;code&gt;-v&lt;/code&gt; for displaying the path of the current test, and &lt;code&gt;--tb=line&lt;/code&gt; in order
to not pollute the screen with stack traces. Those two options are here in the case
of an error during the coverage. It allows me to be faster on isolating tests to
debug.&lt;/p&gt;

&lt;h2 id=&#34;bonus&#34;&gt;Bonus&lt;/h2&gt;

&lt;p&gt;Here I discussed about the coverage, and py.test commands. I use specific options
on CI (travis) in coordination with &lt;a href=&#34;https://coveralls.io/&#34;&gt;coveralls&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My &lt;code&gt;.travis.yml&lt;/code&gt; file which run py.test with coverage.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;language&lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;python&lt;/span&gt;
&lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;install&lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;pip install coveralls&lt;/span&gt;
&lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;py.test -v -tb=line -cov-report= --cov=src&lt;/span&gt;
&lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;after_success&lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;coveralls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It will just put the report into coveralls and displays the
same informations as the other command explained above.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ansible</title>
      <link>http://ixday.github.io/post/ansible/</link>
      <pubDate>Sat, 03 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/ansible/</guid>
      <description>

&lt;p&gt;I have a home media server, and I spent a lot of time configuring,
testing and installing on it. But I was never really satisfied by
the way I had to perform the installation (which happens way too often).&lt;/p&gt;

&lt;p&gt;And I recently discovered &lt;a href=&#34;https://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt;, which
is a tool for doing a lot of stuff with a server
(configuration, run repetitive command, installation) over ssh.&lt;/p&gt;

&lt;p&gt;I really loved experienced with it, it does not require a lot
of dependencies on the targeted server, and can be easily run.&lt;/p&gt;

&lt;h2 id=&#34;the-project&#34;&gt;The project&lt;/h2&gt;

&lt;p&gt;I decided to install my home server with it, because it can at
last allow me to versionned my installation in an easy way
(which seems too complicated with chef or puppet). It also allows
me to test this installation against a virtual machine and have
a reproductible installation.&lt;/p&gt;

&lt;p&gt;For the installation I choose to switch on &lt;a href=&#34;https://www.archlinux.org/&#34;&gt;Archlinux&lt;/a&gt;
(hipsters for the win), for a lot of reasons, but mainly because I can easily
install zfs and nvidia drivers (because I also play on
this computer).&lt;/p&gt;

&lt;p&gt;I decided to create a github organisation in order to push the various git
projects I created. You can check this out: &lt;a href=&#34;https://github.com/T0rt4nk&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository is separated in three sub project which I will explain.&lt;/p&gt;

&lt;h3 id=&#34;development-environment&#34;&gt;Development environment&lt;/h3&gt;

&lt;p&gt;The development environment is based on a VM with Vagrant,
it also contains the configuration to deploy on the targeted machine.&lt;/p&gt;

&lt;p&gt;You can check the sources here -&amp;gt;
&lt;a href=&#34;https://github.com/T0rt4nk/ansible-arch&#34;&gt;https://github.com/T0rt4nk/ansible-arch&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;setup-scripts&#34;&gt;Setup scripts&lt;/h3&gt;

&lt;p&gt;When installing on the server we need a basic operating system with
the ssh service started. I created some scripts which can be retrieved
easily and setup the default config.&lt;/p&gt;

&lt;p&gt;Check it out here -&amp;gt;
&lt;a href=&#34;https://github.com/T0rt4nk/setup&#34;&gt;https://github.com/T0rt4nk/setup&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-installation&#34;&gt;The installation&lt;/h3&gt;

&lt;p&gt;A really great experience so far, it was reliable and easy, it &amp;ldquo;kind of&amp;rdquo; works
(ansible is young currently, a lot of things have to be fixed).&lt;/p&gt;

&lt;p&gt;You can look at the code here -&amp;gt;
&lt;a href=&#34;https://github.com/T0rt4nk/setup&#34;&gt;https://github.com/T0rt4nk/setup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I tried to follow the best practices but there is a need to involve in this
technology and I don&amp;rsquo;t have the time right now (it was a side project here).&lt;/p&gt;

&lt;h2 id=&#34;return-on-experience&#34;&gt;Return on experience&lt;/h2&gt;

&lt;p&gt;Ansible was a really good experience and here are some throughts&lt;/p&gt;

&lt;h3 id=&#34;pro&#34;&gt;PRO&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;easy, understandable, it does not require advanced knowledge, nor
configuration.&lt;/li&gt;
&lt;li&gt;written in python, this is a language I masterize and it helps me
a lot when I tried to hack behaviour. I also think that the choice of
python is really good for this kind of tool. Recently, a sysadmin told
me that he prefers python over golang because he can hack some code
even if he does not understand well what is happening.&lt;/li&gt;
&lt;li&gt;my configuration is versionned (woohoo \o/) and that was the goal of
this project. I now want to perform any repetitive action with Ansible
and/or hack the code to make it better.&lt;/li&gt;
&lt;li&gt;kind of good documentation (this can be hugely improved, but at this moment
it is still better than many projects).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;cons&#34;&gt;CONS&lt;/h3&gt;

&lt;p&gt;I encountered some issues, some are fixable, some will need evolution on
Ansible part.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;debug was a bit complicated, as a lot of code is wrapped on client side
the debugging is hard (I didn&amp;rsquo;t figure how to perform this well). I think
this one will quickly became a priority for the community.&lt;/li&gt;
&lt;li&gt;the tool is not fully mature, some behaviours are counter intuitive and
we have the impression that it is not predicable. This is mostly due
to the mix of Jinja templates, YAML syntax and python execution.&lt;/li&gt;
&lt;li&gt;some tools not complete, or not existing (I am looking at you systemd
support).&lt;/li&gt;
&lt;li&gt;lack of tests, especially on community modules. Beware of the node effect:
people creating their own tool instead of improving existant one. This
bring some regression between versions (migration from 1.4 to 2.0 was a
real pain)&lt;/li&gt;
&lt;li&gt;issue with procedural execution, and state management. This is one of the
most complicated question when coming to issues which tools like Ansible
tries to solve: which part need to be declarative, which doesn&amp;rsquo;t. I think
that the use of jinja templates (and python code through plugins in the
library) is a great idea, but it is not advertised in the documentation
whereas it could save plenty of time and provide a real&lt;/li&gt;
&lt;li&gt;issues with state management, this is mostly due to the declarative
approach. Ansible tries to solve it, but the tool lacks of features and
extensibility. See previous point for thoughts on how to solve this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; This was done during the transition between 1.4 and 2.0, maybe some
behaviours moved the good way and are now fixed. I will try to write an update
later when my project will need to evolve.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bash Expansion</title>
      <link>http://ixday.github.io/post/bash_expansion/</link>
      <pubDate>Thu, 20 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/bash_expansion/</guid>
      <description>&lt;p&gt;A small post just to share a useful bashism the
&lt;a href=&#34;http://wiki.bash-hackers.org/syntax/expansion/brace&#34;&gt;Brace Expansion&lt;/a&gt;.
It is really simple to make it works:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; i in &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;..50&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Hello World &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It will print fifty &amp;ldquo;Hello World&amp;rdquo;. Ok it seems cool but not amazing?
Ok, now the second feature&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; something/&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;foo,bar&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&amp;gt; something/foo something/bar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Still not amazed, ok now type this one:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;cp some_file&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;,.old&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It will copy your file
adding a &lt;code&gt;.old&lt;/code&gt; extension. I do a lot of things like this and it saves me a lot
of time, so think about it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Curl for REST</title>
      <link>http://ixday.github.io/post/curl_for_rest/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/curl_for_rest/</guid>
      <description>&lt;p&gt;It has been a long time since the last post. But today, I will just show two
tools I use for debugging my REST APIs.&lt;/p&gt;

&lt;p&gt;First one is the well known &lt;a href=&#34;http://curl.haxx.se/docs/manpage.html&#34;&gt;curl&lt;/a&gt; and
the second one is &lt;a href=&#34;http://stedolan.github.io/jq/manual/&#34;&gt;jq&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One important feature of curl is its hability to load external files for datas
with &lt;code&gt;@&lt;/code&gt; before file name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;curl -X POST -H &lt;span class=&#34;s2&#34;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d @filepath
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then you can remove the progress bar by adding &lt;code&gt;-s&lt;/code&gt; in the options&lt;/p&gt;

&lt;p&gt;Finally, you can use jq for parsing the output with a request syntax, here is
what the final line looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;curl -X POST -H &lt;span class=&#34;s2&#34;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -s -d @filepath &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq &lt;span class=&#34;s1&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is a small article but I just wanted to show that those tools are really
great, we do not need complex software for this. I prefer using simple cli
because it gives a better understanding on what we are doing, and on what we
are relying on.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>