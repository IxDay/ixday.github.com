<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Admin on Not today...</title>
    <link>http://ixday.github.io/tags/admin/</link>
    <description>Recent content in Admin on Not today...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Feb 2017 10:08:35 +0100</lastBuildDate>
    <atom:link href="http://ixday.github.io/tags/admin/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Alpine iPXE</title>
      <link>http://ixday.github.io/post/alpine_ipxe/</link>
      <pubDate>Thu, 02 Feb 2017 10:08:35 +0100</pubDate>
      
      <guid>http://ixday.github.io/post/alpine_ipxe/</guid>
      <description>&lt;p&gt;For a personal project I want to iPXE boot alpine. I did not found any step by
step guide, so I ended up testing multiple solutions until it works. This
post is a &amp;ldquo;copy&amp;rdquo; of the answer I made &lt;a href=&#34;https://github.com/antonym/netboot.xyz/issues/30#issuecomment-276722892&#34;&gt;here&lt;/a&gt; for the &lt;a href=&#34;https://netboot.xyz&#34;&gt;netboot.xyz project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To fix this issue I used a bunch of thread and resources but here are the three
main entry used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alpine documentation to create a custom ISO image:
&lt;a href=&#34;https://wiki.alpinelinux.org/wiki/How_to_make_a_custom_ISO_image&#34;&gt;https://wiki.alpinelinux.org/wiki/How_to_make_a_custom_ISO_image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Alpine documentation for the network boot:
&lt;a href=&#34;https://wiki.alpinelinux.org/wiki/PXE_boot&#34;&gt;https://wiki.alpinelinux.org/wiki/PXE_boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This post on the Alpine forum from a guy who managed to successfully boot from PXE:
&lt;a href=&#34;https://forum.alpinelinux.org/forum/installation/boot-pxe&#34;&gt;https://forum.alpinelinux.org/forum/installation/boot-pxe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now here is the process to make all of this work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clone the &lt;a href=&#34;http://git.alpinelinux.org/cgit/alpine-iso/&#34;&gt;alpine-iso git repo&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cd to the directory and create the following two files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alpine-pxe.packages&lt;/code&gt; which will be empty (those packages are installed in the iso not in the initrd)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;alpine-pxe.conf.mk&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt; ALPINE_NAME     := alpine-pxe
 KERNEL_FLAVOR   := grsec
 INITFS_FEATURES := ata base bootchart squashfs ext4 usb virtio network dhcp
 MODLOOP_EXTRA   :=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;some options may not be needed, I did not had the time to check this correctly,
&lt;code&gt;virtio&lt;/code&gt; and &lt;code&gt;network&lt;/code&gt; are needed according to
&lt;a href=&#34;https://wiki.alpinelinux.org/wiki/PXE_boot#Using_pxelinux_instead_of_gPXE&#34;&gt;the wiki&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;create the image following the instructions &lt;a href=&#34;https://wiki.alpinelinux.org/wiki/How_to_make_a_custom_ISO_image&#34;&gt;here&lt;/a&gt; and pass your new profile: &lt;code&gt;make PROFILE=alpine-pxe&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;start a simple http server in &lt;code&gt;isotmp.alpine-pxe/isofs/boot/&lt;/code&gt; the ipxe boot will need the two following files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;initramfs-grsec&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vmlinuz-grsec&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;create your ipxe script with an adaptation of the following to your own url&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#!ipxe

dhcp

set base-url http://192.168.122.0:5050
set kernel-params ip=dhcp modules=loop,squashfs,usb-storage nomodeset

kernel ${base-url}/vmlinuz-grsec ${kernel-params}
initrd ${base-url}/initramfs-grsec

boot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here again I am not sure that all the options are needed, still have to perform some tests.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;start your network boot!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Linux Mint 2</title>
      <link>http://ixday.github.io/post/linux_mint_2/</link>
      <pubDate>Mon, 08 Aug 2016 15:23:34 +0200</pubDate>
      
      <guid>http://ixday.github.io/post/linux_mint_2/</guid>
      <description>

&lt;p&gt;I recently messed up my laptop (do not play with &lt;code&gt;/etc/apt/preferences&lt;/code&gt; too much!),
and I had to reinstall my distro. I checked my &lt;a href=&#34;http://ixday.github.io/post/linux_mint/&#34;&gt;previous article&lt;/a&gt;
and noticed some missing informations. So here is a second article of things
I needed to fixup when installing LMDE on my Macbook.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;First, for the creation of the usb key, I ended up using the method described
in the &lt;a href=&#34;https://wiki.archlinux.org/index.php/USB_flash_installation_media#In_GNU.2FLinux&#34;&gt;archlinux wiki&lt;/a&gt;. Basically, this was the command line I entered:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;dd &lt;span class=&#34;nv&#34;&gt;bs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;4M &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/path/to/lmde.iso &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/dev/sdb &lt;span class=&#34;c&#34;&gt;# /dev/sdb is my usb key (lsblk FTW) &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, for the partitioning I forgot to tell the filesystem needed by each part,
so here is lsblk to the rescue:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;sudo lsblk -o NAME,FSTYPE,MOUNTPOINT
NAME               FSTYPE      MOUNTPOINT
sda
├─sda1             hfsplus
├─sda2             vfat        /boot/efi
├─sda3             ext4        /boot
└─sda4             LVM2_member
  ├─vg_ssd-lv_root ext4        /
  └─vg_ssd-lv_swap swap        &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;SWAP&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
sdb                iso9660
├─sdb1             iso9660     /media/max/LMDE &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; Cinnamon 64-bit
└─sdb2             vfat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(sudo needed to output the fs, see &lt;code&gt;man lsblk&lt;/code&gt; for more informations)&lt;/p&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;h3 id=&#34;preferences&#34;&gt;Preferences&lt;/h3&gt;

&lt;p&gt;This time I will try to avoid messing up with the packages, here is what I have
done.&lt;/p&gt;

&lt;p&gt;I want to add unstable and experimental repos, so I created a source file:
&lt;code&gt;/etc/apt/sources.list.d/debian-package-repositories.list&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# https://wiki.debian.org/SourcesList&lt;/span&gt;

deb http://httpredir.debian.org/debian sid main contrib non-free
deb-src http://httpredir.debian.org/debian sid main contrib non-free

deb http://httpredir.debian.org/debian experimental main contrib non-free
deb-src http://httpredir.debian.org/debian experimental main contrib non-free
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now it is time to set up the preferences. But here is the trick, by default
Mint set up a Pin-Priority 700 to all the Debian packages.
This will bring unstable packages at the same level as those from stable.&lt;/p&gt;

&lt;p&gt;See the file &lt;code&gt;/etc/apt/preferences.d/debian-package-repositories.pref&lt;/code&gt;, in
order to have a good priority across those repos replace the content with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Package: *
Pin: release &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;stable
Pin-Priority: 550

Package: *
Pin: release &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;unstable
Pin-Priority: 450
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, just a &lt;code&gt;apt-get update&lt;/code&gt; and we are ready to install packages safely&lt;/p&gt;

&lt;h3 id=&#34;tearing&#34;&gt;Tearing&lt;/h3&gt;

&lt;p&gt;I had a tearing issue on my macbook, which I was able to spot and test with
&lt;a href=&#34;https://www.youtube.com/watch?v=ceX18O9pvLs&#34;&gt;this video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I followed the instructions from the &lt;a href=&#34;https://wiki.archlinux.org/index.php/intel_graphics#Tear-free_video&#34;&gt;arch wiki&lt;/a&gt;. It makes me create &lt;code&gt;/etc/X11/xorg.conf.d/20-intel.conf&lt;/code&gt; file, and
fill it with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Section &lt;span class=&#34;s2&#34;&gt;&amp;quot;Device&amp;quot;&lt;/span&gt;
   Identifier  &lt;span class=&#34;s2&#34;&gt;&amp;quot;Intel Graphics&amp;quot;&lt;/span&gt;
   Driver      &lt;span class=&#34;s2&#34;&gt;&amp;quot;intel&amp;quot;&lt;/span&gt;
   Option      &lt;span class=&#34;s2&#34;&gt;&amp;quot;AccelMethod&amp;quot;&lt;/span&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;quot;sna&amp;quot;&lt;/span&gt;
   Option      &lt;span class=&#34;s2&#34;&gt;&amp;quot;TearFree&amp;quot;&lt;/span&gt;     &lt;span class=&#34;s2&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
   Option      &lt;span class=&#34;s2&#34;&gt;&amp;quot;DRI&amp;quot;&lt;/span&gt;          &lt;span class=&#34;s2&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;
EndSection
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I restarted X (restart the computer in order to be sure :p), and it now works
(hopefully).&lt;/p&gt;

&lt;h3 id=&#34;webcam&#34;&gt;Webcam&lt;/h3&gt;

&lt;p&gt;I had issues with my webcam too. &lt;a href=&#34;https://wiki.archlinux.org/index.php/MacBook#Webcam&#34;&gt;I followed archwiki again&lt;/a&gt;. This one is not
confirmed but no command failed, and the test with mplayer at the end seemed
to work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mplayer tv:// -tv &lt;span class=&#34;nv&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;v4l2:width&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;320:height&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;240:device&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/dev/video0 -fps 30
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;programs&#34;&gt;Programs&lt;/h2&gt;

&lt;h3 id=&#34;neovim&#34;&gt;Neovim&lt;/h3&gt;

&lt;p&gt;I replaced &lt;code&gt;vim&lt;/code&gt; with &lt;code&gt;neovim&lt;/code&gt;, and put all the configuration in the
&lt;code&gt;.config/nvim&lt;/code&gt; directory. It works out of the box, without changing a thing in
the configuration, except the paths for the plugins (which were in &lt;code&gt;~/.vim&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To install &lt;code&gt;neovim&lt;/code&gt; you will need the experimental packages described in
the first part of this post.&lt;/p&gt;

&lt;h3 id=&#34;golang&#34;&gt;Golang&lt;/h3&gt;

&lt;p&gt;I wanted Golang 1.6 (not the 1.3 version from stable). So, I read the
documentation and asked forum. And I discovered the &lt;code&gt;-t&lt;/code&gt; option in &lt;code&gt;apt-get&lt;/code&gt;
which allows as long as it does not broke package integrity to install
from different versions.&lt;/p&gt;

&lt;p&gt;I simply typed the following command to have the version needed:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;apt-get install -t unstable golang&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;docker&#34;&gt;Docker&lt;/h3&gt;

&lt;p&gt;Docker is available in the unstable repository, but this one broke some other
dependencies. I had to install it with a custom repo following
&lt;a href=&#34;https://gist.github.com/bhgraham/ed9f8242dc610b1f38e5&#34;&gt;those instructions&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Add the repo to a dedicated source.list file&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;deb https://get.docker.com/ubuntu docker main&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
       /etc/apt/sources.list.d/docker.list

&lt;span class=&#34;c&#34;&gt;# Add repo keyring&lt;/span&gt;
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
       36A1D7869245C8950F966E92D8576A8BA88D21E9

&lt;span class=&#34;c&#34;&gt;# Update and install the package&lt;/span&gt;
apt-get update -qq &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get install -y lxc-docker

&lt;span class=&#34;c&#34;&gt;# Add my user to the docker group&lt;/span&gt;
gpasswd -a &amp;lt;my_user_name&amp;gt; docker

&lt;span class=&#34;c&#34;&gt;# Enable the docker service for the next start&lt;/span&gt;
systemctl &lt;span class=&#34;nb&#34;&gt;enable &lt;/span&gt;docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now logout, and reconnect and it should work.&lt;/p&gt;

&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;

&lt;p&gt;I always need some base packages in order to start developing, so those are
the most basic one I need in my daily life:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;apt-get install python-dev libxml2-dev libxslt-dev virtualenv libyaml-dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(be sure to install the &lt;code&gt;virtualenv&lt;/code&gt; package and not the &lt;code&gt;python-virtualenv&lt;/code&gt; one,
because it will not add the binary to the &lt;code&gt;PATH&lt;/code&gt;).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Libvirt through vagrant</title>
      <link>http://ixday.github.io/post/libvirt_through_vagrant/</link>
      <pubDate>Fri, 03 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/libvirt_through_vagrant/</guid>
      <description>

&lt;p&gt;I will not install VirtualBox! That&amp;rsquo;s all (nor VMWare, don&amp;rsquo;t be ridiculous).
But I really like &lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt;, and use it every time
I need something closer to a running machine. So, I dig up the internet and
found that there is an unofficial support of libvirt.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;I do not remember where I found the documentation to do this or if I did it by
myself, so no link here, just what I do in order to make this work. I use a
debian jessie distribution, so packages name may vary.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Install packages&lt;/span&gt;
apt-get install qemu-kvm libvirt-daemon-system libvirt-dev zlib1g-dev vagrant

&lt;span class=&#34;c&#34;&gt;# Install vagrant plugin&lt;/span&gt;
vagrant plugin install vagrant-libvirt

&lt;span class=&#34;c&#34;&gt;# Add user to group&lt;/span&gt;
gpasswd -a user_name libvirt

&lt;span class=&#34;c&#34;&gt;# Reboot in order to load kvm and group change&lt;/span&gt;
reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now everything is installed and ready to work with the libvirt provider.
In order to verify that everything works, run:
&lt;code&gt;vagrant init debian/jessie64; vagrant up --provider libvirt&lt;/code&gt;.
It must download a debian/jessie image then run it through vagrant.&lt;/p&gt;

&lt;h2 id=&#34;in-action&#34;&gt;In action&lt;/h2&gt;

&lt;p&gt;For this example, I will just run a Coreos image, and show you how you can
migrate an existing Vagrantfile to the libvirt provider.&lt;/p&gt;

&lt;p&gt;Clone this repo &lt;a href=&#34;https://github.com/coreos/coreos-vagrant&#34;&gt;https://github.com/coreos/coreos-vagrant&lt;/a&gt;, and follow the
instructions.&lt;/p&gt;

&lt;p&gt;Then according to this PR, I made a modification to the Vagrantfile
&lt;a href=&#34;https://github.com/coreos/coreos-vagrant/pull/290/files&#34;&gt;https://github.com/coreos/coreos-vagrant/pull/290/files&lt;/a&gt;, I also added
a valid &lt;code&gt;box_url&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# if the provider asked is libvirt&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;provider&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:libvirt&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# change the box to a libvirt compatible one&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;dongsupark/coreos-%s&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;$update_channel&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# this line indicates where the box can be found&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;https://atlas.hashicorp.com/dongsupark/boxes/coreos-%s&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;$update_channel&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# change the driver name and pass the parameters needed to comply with&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# specifications&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;driver&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;kvm&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;memory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;$vm_memory&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpus&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;$vm_cpus&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you can do a &lt;code&gt;vagrant up&lt;/code&gt; and it will work (it works on my machine :p).&lt;/p&gt;

&lt;h2 id=&#34;bonus&#34;&gt;Bonus&lt;/h2&gt;

&lt;p&gt;You can migrate Vagrant images to libvirt with another plugin:
&lt;code&gt;vagrant-mutate&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Install the plugin&lt;/span&gt;
vagrant plugin install vagrant-mutate

&lt;span class=&#34;c&#34;&gt;# Mutate an image&lt;/span&gt;
vagrant mutate https://atlas.hashicorp.com/debian/boxes/jessie64/versions/8.2.2/providers/virtualbox.box libvirt

&lt;span class=&#34;c&#34;&gt;# Now the image is available, you can rename it if needed&lt;/span&gt;
mv ~/.vagrant.d/boxes/virtualbox ~/.vagrant.d/boxes/debian-VAGRANTSLASH-jessie64

&lt;span class=&#34;c&#34;&gt;# Then run it&lt;/span&gt;
vagrant init debian/jessie64&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; vagrant up --provider libvirt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is no longer really needed as there is more and more images with libvirt
provider.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gogs &#43; Drone</title>
      <link>http://ixday.github.io/post/gogs_drone_compose/</link>
      <pubDate>Thu, 12 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/gogs_drone_compose/</guid>
      <description>

&lt;p&gt;Jenkins is everywhere now, but I really don&amp;rsquo;t like it. So I am looking at
a replacement from day to day. I discovered &lt;a href=&#34;https://gogs.io/&#34;&gt;Gogs&lt;/a&gt; an
I though that a CI is also a good use case for the Golang language.&lt;/p&gt;

&lt;p&gt;And I finally found &lt;a href=&#34;https://drone.io/&#34;&gt;Drone&lt;/a&gt; (which was not really difficult
as it is mentionned in
&lt;a href=&#34;https://github.com/gogits/gogs/issues/1232&#34;&gt;a ticket on gogs github&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;So I decided to make them work together in order to test that.&lt;/p&gt;

&lt;h2 id=&#34;environment&#34;&gt;Environment&lt;/h2&gt;

&lt;p&gt;We want to test them in a temporary location with a simple &amp;ldquo;Hello world&amp;rdquo; test.
Here is the architecture we will use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;  /tmp/drone_gogs_test      # just a custom directory for our test
  |-- test                  # the git repository with the file to test
  |   |-- hello.py          # simple python file with a doctest test
  |-- gogs                  # directory which will be used by gogs to store
  |                         # datas (sqlite, git, ssh)
  |-- drone
      |-- dronerc           # config file
      |-- var               # directory to store drone data (mostly sqlite)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;test-repo&#34;&gt;Test repo&lt;/h2&gt;

&lt;p&gt;We just use the doctest feature of python here, this allow us to perform a
simple test without bootstraping a bunch of code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Simple hello world function testing with doctest&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Simple hello world function&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;    Here the test we want to perform&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;    &amp;gt;&amp;gt;&amp;gt; hello()&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;    &amp;#39;Hello World!&amp;#39;&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;doctest&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;doctest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;testmod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And this is the run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;python hello.py -v
Trying:
    hello&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
Expecting:
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;
ok
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; items had no tests:
    __main__
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; items passed all tests:
   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; tests in __main__.hello
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; tests in &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; items.
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; passed and &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; failed.
Test passed.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;gogs&#34;&gt;Gogs&lt;/h2&gt;

&lt;p&gt;This one is really basic, the tutorial is really simple and it works out
of the box with the docker container provided. I haven&amp;rsquo;t tested it through
ssh, but there is some disclaimer so I will test this later.&lt;/p&gt;

&lt;p&gt;docs: &lt;a href=&#34;https://github.com/gogits/gogs/tree/master/docker&#34;&gt;https://github.com/gogits/gogs/tree/master/docker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I choose the sqlite backend, which is easier to configure because there is
no configuration to do.&lt;/p&gt;

&lt;p&gt;I just run the docker container with the following line:
&lt;code&gt;docker run --name gogs -p 10022:22 -p 10080:3000 -v $(pwd)/gogs:/data gogs/gogs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I connect it through the &lt;strong&gt;localhost:10080&lt;/strong&gt; url and use the default config.
The first user created (through signup) is the administrator of the application.
Just be sure to replace all the localhost mentions with the address of
the container (which can be accessed with &lt;code&gt;docker inspect gogs&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Add a new repository (like you do with github), and push the test project
described in the previous section to it.&lt;/p&gt;

&lt;p&gt;You now have a working Gogs! (Be careful this is a temporary build, do not
use this as your day to day git repo).&lt;/p&gt;

&lt;h2 id=&#34;drone&#34;&gt;Drone&lt;/h2&gt;

&lt;p&gt;This one is a bit more complicated, first we have to create a dronerc file
with the following content:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;REMOTE_DRIVER&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;gogs
&lt;span class=&#34;nv&#34;&gt;REMOTE_CONFIG&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;http://172.17.0.3:3000
&lt;span class=&#34;nv&#34;&gt;DEBUG&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here I put the application in debug mode, this is not mandatory, but I like
to have outputs if something goes bad.&lt;/p&gt;

&lt;p&gt;Now we can start the container:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;docker run \
        --volume $(pwd)/drone/var:/var/lib/drone \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        --env-file $(pwd)/drone/dronerc \
        --restart=always \
        --publish=80:8000 \
        --detach=true \
        --name=drone \
        drone/drone:0.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Linux Mint</title>
      <link>http://ixday.github.io/post/linux_mint/</link>
      <pubDate>Mon, 22 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/linux_mint/</guid>
      <description>

&lt;p&gt;After a long journey, I finally found the distribution which fits
all my need: &lt;strong&gt;Linux Mint Debian Edition&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;why&#34;&gt;Why ?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It is based on debian a distribution which I really like (and not Ubuntu).&lt;/li&gt;
&lt;li&gt;The default tilling (similar to W7) is really comfortable.&lt;/li&gt;
&lt;li&gt;Lot of configuration can be done for shortcuts.&lt;/li&gt;
&lt;li&gt;Support for &lt;code&gt;systemd&lt;/code&gt; (Yay \o/).&lt;/li&gt;
&lt;li&gt;Beautiful UI out of the box (which I didn&amp;rsquo;t have with TWM).&lt;/li&gt;
&lt;li&gt;And a lot more&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;As I am on Macbook (once upon a time, I was young and dumb), I need a
particular configuration of the partitions for the installation.&lt;/p&gt;

&lt;p&gt;Here is how my HDD is partitionned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, the &lt;code&gt;/boot/efi&lt;/code&gt; partition with the boot flag is about 200MB&lt;/li&gt;
&lt;li&gt;Then the Macintosh partition, in hfs+&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;/boot&lt;/code&gt;, partition, as I will use LVM I need to have an external
partition to hold the initram images, with an ext4 filesystem.&lt;/li&gt;
&lt;li&gt;Finally, the LVM partition which is subdivided in two partitions:

&lt;ul&gt;
&lt;li&gt;lvm_root: which will hold the root filesystem&lt;/li&gt;
&lt;li&gt;lvm_swap: my system swap&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mount the partitions in the right order into &lt;code&gt;/mnt/target&lt;/code&gt;, follow the
expert disk partioning in the installation wizard.&lt;/p&gt;

&lt;p&gt;Install LVM into the new system (with chroot), then fillup the fstab file
to look similar to something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/dev/mapper/vg_ssd-lv_root  /	    ext4	rw,relatime,discard,data&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ordered  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; 1
/dev/mapper/vg_ssd-lv_swap  none	swap	defaults                          0	0

proc          /proc	    proc  defaults        0	0
/dev/sda3     /boot	    ext4  defaults        &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; 2
/dev/sda2     /boot/efi vfat  defaults        &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;Now that we have a running distribution there is some small details to fix.
Here are some piece of configuration I needed to fix to have a satisfying
install.&lt;/p&gt;

&lt;h3 id=&#34;chromium-as-default&#34;&gt;Chromium as default&lt;/h3&gt;

&lt;p&gt;First, I want to use chromium as the default browser, simply install it with
the package manager, then just run the &lt;code&gt;Preferred Application&lt;/code&gt; program to
setup the default.&lt;/p&gt;

&lt;h3 id=&#34;microphone-issue&#34;&gt;Microphone issue&lt;/h3&gt;

&lt;p&gt;As I use a Macbook I have an issue with my mic by default. To fix that, just
create the &lt;code&gt;/etc/modprobe.d/alsa-base.conf&lt;/code&gt; file, and just past the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;options snd-hda-intel model=mbp101 index=1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Reboot, and tadaaa!&lt;/p&gt;

&lt;h3 id=&#34;systemd&#34;&gt;Systemd&lt;/h3&gt;

&lt;p&gt;By default, on LMDE Betsy (my current installation), the init system is
still sysvinit.
I really like systemd and good news the skeleton of it is already present,
so we just have to explain the system to change.
And&amp;hellip; it is simpler as I firstly thought, because there is a package for
that: &lt;code&gt;systemd-sysv&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Just run the installation and you will be good&lt;/p&gt;

&lt;h3 id=&#34;powertop&#34;&gt;Powertop&lt;/h3&gt;

&lt;p&gt;As systemd is already installed, here is the service file:
&lt;code&gt;/etc/systemd/system/powertop.service&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;k&#34;&gt;[Unit]&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;Description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;Powertop tunings&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;[Service]&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;oneshot&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;ExecStart&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;/usr/sbin/powertop --auto-tune&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;Environment&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;TERM=xterm&amp;quot;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;[Install]&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;WantedBy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;multi-user.target&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I had to install &lt;code&gt;xterm&lt;/code&gt; in order to make the service work, because
powertop needs a shell at runtime to perform the auto-tune statement.&lt;/p&gt;

&lt;p&gt;It is a systemd service which will be loaded at startup, so just enable it:
&lt;code&gt;systemctl enable powertop&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;skype&#34;&gt;Skype&lt;/h3&gt;

&lt;p&gt;This one is easy, but I also want my beautiful cinnamon skin on it ;)&lt;/p&gt;

&lt;p&gt;Just download and install the .deb file from
&lt;a href=&#34;http://www.skype.com/en/download-skype/skype-for-computer/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enable multiple architecture if you are running x86_64 distribution:
&lt;code&gt;dpkg --add-architecture i386&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And now install some complementary packages:
&lt;code&gt;apt-get install gtk2-engines-murrine:i386 gtk2-engines-pixbuf:i386&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;last-word&#34;&gt;Last word&lt;/h2&gt;

&lt;p&gt;This article will evolve to fit the latest change on my system, stay tuned!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ansible</title>
      <link>http://ixday.github.io/post/ansible/</link>
      <pubDate>Sat, 03 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/ansible/</guid>
      <description>

&lt;p&gt;I have a home media server, and I spent a lot of time configuring,
testing and installing on it. But I was never really satisfied by
the way I had to perform the installation (which happens way too often).&lt;/p&gt;

&lt;p&gt;And I recently discovered &lt;a href=&#34;https://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt;, which
is a tool for doing a lot of stuff with a server
(configuration, run repetitive command, installation) over ssh.&lt;/p&gt;

&lt;p&gt;I really loved experienced with it, it does not require a lot
of dependencies on the targeted server, and can be easily run.&lt;/p&gt;

&lt;h2 id=&#34;the-project&#34;&gt;The project&lt;/h2&gt;

&lt;p&gt;I decided to install my home server with it, because it can at
last allow me to versionned my installation in an easy way
(which seems too complicated with chef or puppet). It also allows
me to test this installation against a virtual machine and have
a reproductible installation.&lt;/p&gt;

&lt;p&gt;For the installation I choose to switch on &lt;a href=&#34;https://www.archlinux.org/&#34;&gt;Archlinux&lt;/a&gt;
(hipsters for the win), for a lot of reasons, but mainly because I can easily
install zfs and nvidia drivers (because I also play on
this computer).&lt;/p&gt;

&lt;p&gt;I decided to create a github organisation in order to push the various git
projects I created. You can check this out: &lt;a href=&#34;https://github.com/T0rt4nk&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository is separated in three sub project which I will explain.&lt;/p&gt;

&lt;h3 id=&#34;development-environment&#34;&gt;Development environment&lt;/h3&gt;

&lt;p&gt;The development environment is based on a VM with Vagrant,
it also contains the configuration to deploy on the targeted machine.&lt;/p&gt;

&lt;p&gt;You can check the sources here -&amp;gt;
&lt;a href=&#34;https://github.com/T0rt4nk/ansible-arch&#34;&gt;https://github.com/T0rt4nk/ansible-arch&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;setup-scripts&#34;&gt;Setup scripts&lt;/h3&gt;

&lt;p&gt;When installing on the server we need a basic operating system with
the ssh service started. I created some scripts which can be retrieved
easily and setup the default config.&lt;/p&gt;

&lt;p&gt;Check it out here -&amp;gt;
&lt;a href=&#34;https://github.com/T0rt4nk/setup&#34;&gt;https://github.com/T0rt4nk/setup&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-installation&#34;&gt;The installation&lt;/h3&gt;

&lt;p&gt;A really great experience so far, it was reliable and easy, it &amp;ldquo;kind of&amp;rdquo; works
(ansible is young currently, a lot of things have to be fixed).&lt;/p&gt;

&lt;p&gt;You can look at the code here -&amp;gt;
&lt;a href=&#34;https://github.com/T0rt4nk/setup&#34;&gt;https://github.com/T0rt4nk/setup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I tried to follow the best practices but there is a need to involve in this
technology and I don&amp;rsquo;t have the time right now (it was a side project here).&lt;/p&gt;

&lt;h2 id=&#34;return-on-experience&#34;&gt;Return on experience&lt;/h2&gt;

&lt;p&gt;Ansible was a really good experience and here are some throughts&lt;/p&gt;

&lt;h3 id=&#34;pro&#34;&gt;PRO&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;easy, understandable, it does not require advanced knowledge, nor
configuration.&lt;/li&gt;
&lt;li&gt;written in python, this is a language I masterize and it helps me
a lot when I tried to hack behaviour. I also think that the choice of
python is really good for this kind of tool. Recently, a sysadmin told
me that he prefers python over golang because he can hack some code
even if he does not understand well what is happening.&lt;/li&gt;
&lt;li&gt;my configuration is versionned (woohoo \o/) and that was the goal of
this project. I now want to perform any repetitive action with Ansible
and/or hack the code to make it better.&lt;/li&gt;
&lt;li&gt;kind of good documentation (this can be hugely improved, but at this moment
it is still better than many projects).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;cons&#34;&gt;CONS&lt;/h3&gt;

&lt;p&gt;I encountered some issues, some are fixable, some will need evolution on
Ansible part.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;debug was a bit complicated, as a lot of code is wrapped on client side
the debugging is hard (I didn&amp;rsquo;t figure how to perform this well). I think
this one will quickly became a priority for the community.&lt;/li&gt;
&lt;li&gt;the tool is not fully mature, some behaviours are counter intuitive and
we have the impression that it is not predicable. This is mostly due
to the mix of Jinja templates, YAML syntax and python execution.&lt;/li&gt;
&lt;li&gt;some tools not complete, or not existing (I am looking at you systemd
support).&lt;/li&gt;
&lt;li&gt;lack of tests, especially on community modules. Beware of the node effect:
people creating their own tool instead of improving existant one. This
bring some regression between versions (migration from 1.4 to 2.0 was a
real pain)&lt;/li&gt;
&lt;li&gt;issue with procedural execution, and state management. This is one of the
most complicated question when coming to issues which tools like Ansible
tries to solve: which part need to be declarative, which doesn&amp;rsquo;t. I think
that the use of jinja templates (and python code through plugins in the
library) is a great idea, but it is not advertised in the documentation
whereas it could save plenty of time and provide a real&lt;/li&gt;
&lt;li&gt;issues with state management, this is mostly due to the declarative
approach. Ansible tries to solve it, but the tool lacks of features and
extensibility. See previous point for thoughts on how to solve this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; This was done during the transition between 1.4 and 2.0, maybe some
behaviours moved the good way and are now fixed. I will try to write an update
later when my project will need to evolve.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unable to find LVM volume... with LVM on top of Luks</title>
      <link>http://ixday.github.io/post/unable_to_find_lvm_volume_with_lvm_on_top_of_luks/</link>
      <pubDate>Wed, 19 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/unable_to_find_lvm_volume_with_lvm_on_top_of_luks/</guid>
      <description>&lt;p&gt;Following &lt;a href=&#34;{filename}/2015-08-18.debian-install-2.md&#34;&gt;this article&lt;/a&gt;
I have LVM on top of Luks for my system.
When I boot I encounter the following message:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;  Volume group &amp;quot;vg_ssd&amp;quot; not found
  Skipping volume group vg_ssd
Unable to find LVM volume vg_ssd/lv_root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It appears that LVM is started before I open the crypted partition and display this error.
To fix this we will manipulate the initramfs \o/.&lt;/p&gt;

&lt;p&gt;The issue is in the file &lt;code&gt;/usr/share/initramfs-tools/scripts/local-top/cryptroot&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which starts like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;PREREQ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;cryptroot-prepare&amp;quot;&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# Standard initramfs preamble&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;
prereqs&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c&#34;&gt;# Make sure that cryptroot is run last in local-top&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; req in &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;dirname &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/*&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
		&lt;span class=&#34;nv&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;##*/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$script&lt;/span&gt; !&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; cryptroot &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
			&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$script&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt; in
prereqs&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
	prereqs
	&lt;span class=&#34;nb&#34;&gt;exit &lt;/span&gt;0
	&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;# source for log_*_msg() functions, see LP: #272301&lt;/span&gt;
. /scripts/functions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Line 10 to 16 it says that cryptroot is run last, in the same directory there is a &lt;code&gt;lvm2&lt;/code&gt;
script. So, what is happening is that cryptroot is launched after lvm2 which is not what we want.
To fix this remove lines 10 to 16 and replace them with &lt;code&gt;echo &amp;quot;$PREREQ&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;PREREQ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;cryptroot-prepare&amp;quot;&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# Standard initramfs preamble&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;
prereqs&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PREREQ&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt; in
prereqs&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
	prereqs
	&lt;span class=&#34;nb&#34;&gt;exit &lt;/span&gt;0
	&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;# source for log_*_msg() functions, see LP: #272301&lt;/span&gt;
. /scripts/functions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At the init step files are taken in alphabetical order so &lt;code&gt;cryptroot&lt;/code&gt; will come before
&lt;code&gt;lvm2&lt;/code&gt; (c &amp;lt; l).&lt;/p&gt;

&lt;p&gt;Now we just regenerate the initrd files: &lt;code&gt;update-initramfs -u -k all&lt;/code&gt; reboot and voila, it works :D&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>weechat</title>
      <link>http://ixday.github.io/post/weechat/</link>
      <pubDate>Thu, 16 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/weechat/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://weechat.org/&#34;&gt;Weechat&lt;/a&gt; is an ncurse client for IRC,
which I use and have tweaked to fit my needs.&lt;/p&gt;

&lt;p&gt;But Weechat have one major issue: IT IS NOT USER FRIENDLY.
The documentation is poor, there is a lot of plugins,
which documentation is even poorer, and the configuration is a hell.&lt;/p&gt;

&lt;p&gt;WELCOME!&lt;/p&gt;

&lt;p&gt;First of all the installation, &lt;code&gt;apt-get install weechat&lt;/code&gt;
will be sufficient on a real OS. Then, just type &lt;code&gt;weechat&lt;/code&gt; in
order to launch the client.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;{filename}/images/weechat_1.png&#34;&gt;&lt;img src=&#34;{filename}/images/weechat_1.png&#34; alt=&#34;First screen&#34; /&gt;{:.image-process-article-image}&lt;/a&gt;{:target=&amp;rdquo;_blank&amp;rdquo;}&lt;/p&gt;

&lt;h2 id=&#34;install-plugins&#34;&gt;Install plugins&lt;/h2&gt;

&lt;p&gt;At this point all the configuration can be done inside weechat,
the command &lt;code&gt;script&lt;/code&gt; will install all the plugins you want, just like &lt;code&gt;apt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First script to install: &lt;code&gt;iset.pl&lt;/code&gt;, just type &lt;code&gt;script search iset&lt;/code&gt; and a
selection of available plugins will appears.
To leave it type &lt;code&gt;q&lt;/code&gt; then press enter, if you want to install the script
type &lt;code&gt;i&lt;/code&gt; then press enter (an &lt;code&gt;i&lt;/code&gt; will appears in front of the name package,
type &lt;code&gt;q&lt;/code&gt; and press enter to exit).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;{filename}/images/weechat_script.png&#34;&gt;&lt;img src=&#34;{filename}/images/weechat_script.png&#34; alt=&#34;script search screen&#34; /&gt;{:.image-process-article-image}&lt;/a&gt;{:target=&amp;rdquo;_blank&amp;rdquo;}&lt;/p&gt;

&lt;p&gt;If you didn&amp;rsquo;t install the package through &lt;code&gt;script search&lt;/code&gt; you can install it
with the following command: &lt;code&gt;script install iset.pl&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;configure&#34;&gt;Configure&lt;/h2&gt;

&lt;p&gt;We will now be able to configure, just type &lt;code&gt;/iset&lt;/code&gt; to enter the iset screen.
You will now see a list of all the parameters which can be modified.
If you type something in the input bar, it will look for the pattern in
the list of variables. If you want to search through the values, put an
&lt;code&gt;=&lt;/code&gt; before the pattern.&lt;/p&gt;

&lt;p&gt;To change the value, press &lt;code&gt;Alt + Enter&lt;/code&gt; then enter the new value
(it is possible to navigate through values depending on variable type by
pressing the &lt;code&gt;Tab&lt;/code&gt; key).&lt;/p&gt;

&lt;p&gt;For example, I don&amp;rsquo;t like the background color of iset selector.
On this screenshot I replace the value by &lt;code&gt;darkgray&lt;/code&gt;,
changed values appear in magenta.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;{filename}/images/weechat_iset.png&#34;&gt;&lt;img src=&#34;{filename}/images/weechat_iset.png&#34; alt=&#34;iset screen&#34; /&gt;{:.image-process-article-image}&lt;/a&gt;{:target=&amp;rdquo;_blank&amp;rdquo;}&lt;/p&gt;

&lt;h2 id=&#34;the-buffer-list&#34;&gt;The buffer list&lt;/h2&gt;

&lt;p&gt;When using weechat I like to know on which buffer I am.
A buffer is the way weechat display informations, for example if I type:
&lt;code&gt;/iset&lt;/code&gt; weechat will open a new buffer to display the informations.
If I want to close a buffer I just have to type: &lt;code&gt;/close&lt;/code&gt;, If I want
to navigate through buffers I type &lt;code&gt;/buffer +1&lt;/code&gt;. The command &lt;code&gt;/buffer list&lt;/code&gt;
will display the buffer list in the first buffer, type: &lt;code&gt;/buffer 1&lt;/code&gt; to see it.&lt;/p&gt;

&lt;p&gt;There is a convenient plugin to display that: &lt;code&gt;chanlist.rb&lt;/code&gt;.
Sadly this one is not supported and you will need to download it.
Here is the command to download the script:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wget https://weechat.org/files/scripts/unofficial/chanlist.rb ~/.weechat/ruby/autoload/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Relauch weechat or type &lt;code&gt;/script load chanlist.rb&lt;/code&gt;.
We now have the buffer list on the left, but there is some commands to run in order to
have something good.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# It is mandatory and appears in the chanlist documentation.&lt;/span&gt;
/set irc.look.server_buffer independent

&lt;span class=&#34;c&#34;&gt;# Add UTF8 (for the delimiter) only if your terminal is UTF8 compatible (I hope so).&lt;/span&gt;
/set plugins.var.ruby.chanlist.utf8 on

&lt;span class=&#34;c&#34;&gt;# Fix chanlist size&lt;/span&gt;
/set weechat.bar.chanlist.size 30
/set weechat.bar.chanlist.size_max 30
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The two last config fixed the weechat chanlist bar size.&lt;/p&gt;

&lt;p&gt;Finally, I do not really like the color which is used for displaying the current
buffer. I want it magenta, chanlist is not very well developed and I will have to
modify the source code. Run the following line for changing this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sed -i -- &#39;s/white,red/magenta,default/g&#39; ~/.weechat/ruby/autoload/chanlist.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Quit and relaunch weechat to see the changes. Here is my current result:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;{filename}/images/weechat_chanlist.png&#34;&gt;&lt;img src=&#34;{filename}/images/weechat_chanlist.png&#34; alt=&#34;chanlist screen&#34; /&gt;{:.image-process-article-image}&lt;/a&gt;{:target=&amp;rdquo;_blank&amp;rdquo;}&lt;/p&gt;

&lt;h2 id=&#34;connect-to-a-server-and-a-channel&#34;&gt;Connect to a server and a channel&lt;/h2&gt;

&lt;p&gt;Now we can visualize the buffers we will connect to a server.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Setup nickname and connect&lt;/span&gt;
/set irc.server_default.nicks &lt;span class=&#34;s2&#34;&gt;&amp;quot;MaxV, MaxV_, MaxV__&amp;quot;&lt;/span&gt;
/connect freenode
/join &lt;span class=&#34;c&#34;&gt;#freenode&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;# Customize nicklist&lt;/span&gt;
/set irc.look.color_nicks_in_nicklist on
/set weechat.bar.nicklist.size_max 12
/set weechat.bar.nicklist.size 12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is the result:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;{filename}/images/weechat_nicklist.png&#34;&gt;&lt;img src=&#34;{filename}/images/weechat_nicklist.png&#34; alt=&#34;nicklist screen&#34; /&gt;{:.image-process-article-image}&lt;/a&gt;{:target=&amp;rdquo;_blank&amp;rdquo;}&lt;/p&gt;

&lt;h2 id=&#34;bars&#34;&gt;Bars&lt;/h2&gt;

&lt;p&gt;I will now customize the bars (because I can :p), this is inspired by
&lt;a href=&#34;http://pascalpoitras.com/my-weechat-configuration/&#34;&gt;Pascal Poitras blog entry&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Change original separator (need UTF8 support)&lt;/span&gt;
/set weechat.look.separator_horizontal &lt;span class=&#34;s2&#34;&gt;&amp;quot;—&amp;quot;&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;# Create and customize activetitle bar&lt;/span&gt;
/bar add activetitle window top &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; buffer_title
/set weechat.bar.activetitle.priority 500
/set weechat.bar.activetitle.conditions &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;active&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
/set weechat.bar.activetitle.color_fg red
/set weechat.bar.activetitle.color_bg default
/set weechat.bar.activetitle.separator on

&lt;span class=&#34;c&#34;&gt;# Customize the title bar&lt;/span&gt;
/set weechat.bar.title.conditions &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;inactive&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
/set weechat.bar.title.color_fg white
/set weechat.bar.title.color_bg default
/set weechat.bar.title.separator on

&lt;span class=&#34;c&#34;&gt;# Remove status bar&lt;/span&gt;
/bar del status

&lt;span class=&#34;c&#34;&gt;# Create and customize the rootinput bar&lt;/span&gt;
/bar add rootinput root bottom &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;buffer_name&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;+&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;input_prompt&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;+&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;away&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,&lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;input_search&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;,&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;input_paste&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;,input_text
/set weechat.bar.rootinput.separator on

&lt;span class=&#34;c&#34;&gt;# Remove the input bar&lt;/span&gt;
/bar del input
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is the result:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;{filename}/images/weechat_bars.png&#34;&gt;&lt;img src=&#34;{filename}/images/weechat_bars.png&#34; alt=&#34;bars screen&#34; /&gt;{:.image-process-article-image}&lt;/a&gt;{:target=&amp;rdquo;_blank&amp;rdquo;}&lt;/p&gt;

&lt;h2 id=&#34;layout&#34;&gt;Layout&lt;/h2&gt;

&lt;p&gt;I want to display 4 buffers at a time, I will change the layout to fit my needs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/window splith 50
/window splitv 50
/window 1
/window splitv 50

/layout store default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;{filename}/images/weechat_layout.png&#34;&gt;&lt;img src=&#34;{filename}/images/weechat_layout.png&#34; alt=&#34;layout screen&#34; /&gt;{:.image-process-article-image}&lt;/a&gt;{:target=&amp;rdquo;_blank&amp;rdquo;}&lt;/p&gt;

&lt;h2 id=&#34;key-bindings&#34;&gt;Key bindings&lt;/h2&gt;

&lt;p&gt;I have a few key bindings, at this point it fits my needs,
maybe I will add some in the future and edit this post accordingly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Activate the mouse on Alt + x, desactivate by pressing a second time&lt;/span&gt;
/key &lt;span class=&#34;nb&#34;&gt;bind &lt;/span&gt;meta-x /mouse toggle

&lt;span class=&#34;c&#34;&gt;# Navigate through windows by pressing Alt + right, Alt + left&lt;/span&gt;
/key &lt;span class=&#34;nb&#34;&gt;bind &lt;/span&gt;meta-meta2-C /window +1
/key &lt;span class=&#34;nb&#34;&gt;bind &lt;/span&gt;meta-meta2-D /window -1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Systemd-nspawn</title>
      <link>http://ixday.github.io/post/systemd_nspawn/</link>
      <pubDate>Tue, 19 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/systemd_nspawn/</guid>
      <description>

&lt;p&gt;I am a huge fan of docker for my dev environments, it helps me keeping things
clear and understanding what are the ressources needed for a project.
A few month ago a friend told me that there already is a similar feature on
Linux, and this feature is systemd-nspawn.&lt;/p&gt;

&lt;h2 id=&#34;creating-your-first-container&#34;&gt;Creating your first container&lt;/h2&gt;

&lt;p&gt;So like docker I wanted to first start a container. Nspawn has no environment
so everything has to be done &amp;ldquo;by hand&amp;rdquo;. First, as long as we do not have any
registery we need to retrieve an &amp;ldquo;image&amp;rdquo; of the distribution we need.&lt;/p&gt;

&lt;p&gt;(all the commands are ran on behalf of the root user)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;apt-get install debootstrap
debootstrap --arch&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;amd64 stable /tmp/my-debian-machine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a quite long to retrieve, so you can go and take a coffee during the
download ;)&lt;/p&gt;

&lt;p&gt;Now, we have a folder containing the debian basic configuration, we can &amp;ldquo;spawn&amp;rdquo;
it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;systemd-nspawn -D /tmp/my-debian-machine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that&amp;rsquo;s it! You now have your own container up and running.
The main difference is that, it is not running on AUFS, and every change will
be definitive.&lt;/p&gt;

&lt;p&gt;Your machine is now visible if you run &lt;code&gt;machinectl&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;booting-a-container-like-a-real-vm&#34;&gt;Booting a container like a real VM&lt;/h2&gt;

&lt;p&gt;Now, we will see a feature that I didn&amp;rsquo;t find in docker, the ability to boot
your system.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;systemd-nspawn -D /tmp/my-debian-machine -b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And a prompt will appear, so to log in just &amp;lsquo;type the root password&amp;rsquo;.
I&amp;rsquo;m sure you forget to set that before ;). Just stop your container,
relaunch it without boot and set the password.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# stop the container&lt;/span&gt;
machinectl poweroff my-debian-machine
&lt;span class=&#34;c&#34;&gt;# launch without boot&lt;/span&gt;
systemd-nspawn -D /tmp/my-debian-machine

&lt;span class=&#34;c&#34;&gt;# when you have the prompt type a new password&lt;/span&gt;
passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, you can reboot and loggin normally. And the most interesting thing about
the normal boot, is that now you can profit of all the power of &lt;em&gt;systemd&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;autologin-at-startup&#34;&gt;Autologin at startup&lt;/h2&gt;

&lt;p&gt;I have a normal boot, so I have to loggin, but I am in a container and I want
to automatically be logged when I start it.&lt;/p&gt;

&lt;p&gt;So, here is how we can do,
&lt;strong&gt;note: I have tested it on a debian image, the path may not been the same&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;When we connect into our container we are using the system console, so
we will override the systemd service handling the console to force the
autologin. In linux, the console manager is &lt;em&gt;getty&lt;/em&gt; and the service dedicated
to the console is &lt;em&gt;console-getty@.service&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To override a service, you just have to create a &lt;em&gt;service_name.service.d&lt;/em&gt;
directory in &lt;code&gt;/etc/systemd/system&lt;/code&gt; and a file &lt;em&gt;whatever_name.conf&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So, I created the dedicated file and put this inside:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# /etc/systemd/system/console-getty.service.d/autologin.conf&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Service&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;ExecStart&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;ExecStart&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;-/sbin/agetty --noclear --autologin root --keep-baud console 115200,38400,9600 &lt;span class=&#34;nv&#34;&gt;$TERM&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first &lt;code&gt;ExecStart=&lt;/code&gt; clean the old call so that we can override it in the
following line.&lt;/p&gt;

&lt;h2 id=&#34;first-conclusion&#34;&gt;First conclusion&lt;/h2&gt;

&lt;p&gt;Systemd-nspawn comes with great features and is directly shipped in the system,
it is a good tool for stuff you want to do in a closed environment.
I wanted to ship &lt;em&gt;Steam&lt;/em&gt; in a Docker container after reading
&lt;a href=&#34;http://fabiorehm.com/blog/2014/09/11/running-gui-apps-with-docker/&#34;&gt;this&lt;/a&gt;,
but I think I will use systemd instead.&lt;/p&gt;

&lt;p&gt;For development, I will continue to stick with Docker because of the
ecosystem and the community. I have started to use
&lt;a href=&#34;https://maci0.wordpress.com/2014/05/02/run-any-applications-on-rhel7-containerized-with-3d-acceleration-and-pulseaudio-steam-pidgin-vlc/&#34;&gt;docker-compose&lt;/a&gt; and it allows a lot
of interesting suffs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Small docker project</title>
      <link>http://ixday.github.io/post/small_tool/</link>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/small_tool/</guid>
      <description>

&lt;p&gt;I really like docker (even if I will look at
&lt;a href=&#34;http://www.freedesktop.org/software/systemd/man/
systemd-nspawn.html&#34;&gt;systemd-nspawn&lt;/a&gt;), and also &lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp&lt;/a&gt;.
So I decided to create a small tool for serving a directory with a livereload.&lt;/p&gt;

&lt;p&gt;The repo is available &lt;a href=&#34;https://github.com/IxDay/docker-html5-boilerplate&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-i-have-learned&#34;&gt;What I have learned&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Docker, especially with boot2docker (I am on MacOSX shame on me), is not
really flexible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;no evaluation for environment variables&lt;/li&gt;
&lt;li&gt;you can not store a variable through multiple run, you will need to do
a oneliner e.g:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  &lt;span class=&#34;c&#34;&gt;# you will need to write this in the Dockerfile&lt;/span&gt;
  RUN &lt;span class=&#34;nv&#34;&gt;TMPFILE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;tempfile&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class=&#34;nv&#34;&gt;$TMPFILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
    rm &lt;span class=&#34;nv&#34;&gt;$TMPFILE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;you cannot build remotely from a custom branch:
&lt;a href=&#34;http://stackoverflow.com/questions/25509828/
can-a-docker-build-use-the-url-of-a-git-branch&#34;&gt;see this post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;accessibility to the container through boot2docker is pretty hard:
&lt;a href=&#34;http://stackoverflow.com/questions/28047809/
docker0-interface-missing-on-osx/&#34;&gt;see this post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;awk is an awesome tool for manipulating strings and console outputs.
Best one hour investment so far. If you have to write bash scripts, awk is
definitely a best to know tool.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;nodejs is definitely a hell for developers but is the only platform for
frontend dev. Here are some issues I have gone through:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bug in collecting interfaces which forced me to use a syscall:
&lt;a href=&#34;https://github.com/joyent/node/issues/9029&#34;&gt;bug report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;npm ecosystem is messy. You will have to test many plugin, which does
quite the same thing, to find the one with &lt;em&gt;THE&lt;/em&gt; option you need.
And finally find that the lib is 10 lines long and wraps another lib.&lt;/li&gt;
&lt;li&gt;no good packaging, which leads to a custom installation path,
thanks &lt;a href=&#34;https://nodesource.com/blog/
nodejs-v012-iojs-and-the-nodesource-linux-repositories&#34;&gt;this blog post&lt;/a&gt; for the help.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;gulpjs is way better than grunt and must be ported to other languages,
really excited about the 4.0 version coming soon.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how-i-can-improve&#34;&gt;How I can improve&lt;/h2&gt;

&lt;p&gt;The tool is currently working, I am thinking of adding a markdown compiler in
the chain because I really use markdown all the time.&lt;/p&gt;

&lt;p&gt;I still have to test it a bit to be sure it is okay to make a release
(first thing I release yay \o/)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ssh, rsync and fswatch</title>
      <link>http://ixday.github.io/post/rsync_fswatch/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/rsync_fswatch/</guid>
      <description>

&lt;p&gt;Sometimes I just can&amp;rsquo;t work on a local environment (particular architecture,
particular services, local configuration too complex, etc&amp;hellip;).
So, I have to synchronize my local directory with a remote one and test the
web interface on my local machine.&lt;/p&gt;

&lt;h2 id=&#34;ssh&#34;&gt;ssh&lt;/h2&gt;

&lt;p&gt;First, ssh! For this I need a ssh connection to the remote server, here I use
a particular ssh key.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh -i ~/.ssh/my_ssh.key mylogin@192.168.0.1

&lt;span class=&#34;c&#34;&gt;# urls also work&lt;/span&gt;
ssh -i ~/.ssh/my_ssh.key mylogin@my.url.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Okay, at this moment we can use a config file for ssh: &lt;code&gt;$HOME/.ssh/config&lt;/code&gt; :)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Host 192.168.0.1 my.url.com
   user mylogin
   IdentityFile ~/.ssh/my_ssh.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The CLI is now:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# with IP&lt;/span&gt;
ssh 192.168.0.1

&lt;span class=&#34;c&#34;&gt;# with url&lt;/span&gt;
ssh my.url.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I have a connection but now I want to share my dev server on the remote host to
my local web browser. For that I will use the &lt;code&gt;-L&lt;/code&gt; of ssh, this will forward
the local port with the remote one.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh -L 5000:localhost:9999 192.168.0.1 &lt;span class=&#34;c&#34;&gt;# same as before it works with url&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command will connect my local port 5000 to the port 9999 of the remote
host local interface (so I do not have to open another port on the remote
except the ssh one)&lt;/p&gt;

&lt;h2 id=&#34;rsync&#34;&gt;rsync&lt;/h2&gt;

&lt;p&gt;Then, we will use rsync to send files to our server&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rsync -avz -e &lt;span class=&#34;s2&#34;&gt;&amp;quot;ssh&amp;quot;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt;/folder my.url.com:/home/username/remote_folder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;-a the archive option (recursive, preserve links, times, permissions,
group, owner, devices files&lt;/li&gt;
&lt;li&gt;-v the verbose option&lt;/li&gt;
&lt;li&gt;-z the compress option&lt;/li&gt;
&lt;li&gt;-e remote shell to use (basically we specify here all the ssh configuration
needed. If we didn&amp;rsquo;t had the .ssh/config file the command line should have been
&lt;code&gt;rsync -avz -e &amp;quot;ssh -i ~/.ssh/my_ssh.key&amp;quot; local/folder
mylogin@my.url.com:/home/username/remote_folder&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is possible to not want to synchronize all files
(.git folder, generated files, etc&amp;hellip;), so we will use the &lt;code&gt;--exclude-from&lt;/code&gt;
option. In the folder we want to synchronize, we create a file &lt;code&gt;exclude.txt&lt;/code&gt;
(the name is not important), then we fill it with the needed files or folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;.git
/static
*.pyc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Take care that the &lt;code&gt;/&lt;/code&gt; apply at the point where the rsync command is launched.
So it will not have the same effect if we change the working directory.&lt;/p&gt;

&lt;p&gt;The command will look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# move to working dir&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd local&lt;/span&gt;/folder

&lt;span class=&#34;nv&#34;&gt;remote_loc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;my.url.com:/home/username/remote_folder&amp;quot;&lt;/span&gt;

rsync -avz -e &lt;span class=&#34;s2&#34;&gt;&amp;quot;ssh&amp;quot;&lt;/span&gt; . &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;remote_loc&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; --exclude-from &lt;span class=&#34;s1&#34;&gt;&amp;#39;exclude.txt&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;fswatch-or-inotify&#34;&gt;fswatch (or inotify)&lt;/h2&gt;

&lt;p&gt;I also want my folder to synchronize automatically with the remote one when a
file change. For this purpose I will use &lt;code&gt;fswatch&lt;/code&gt; because I use MacOS
(shame on me), &lt;code&gt;inotify&lt;/code&gt; can be use on linux platforms.&lt;/p&gt;

&lt;p&gt;First, check the changes on my working directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;fswatch -e .git/ -e .pyc -e &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/static .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here I use &lt;code&gt;$(pwd)&lt;/code&gt; in order to not catch the &lt;code&gt;/static&lt;/code&gt; folder at the root of
the folder, but keep the nested one included. This catch the same files as the
exclude file from rsync. At this point I haven&amp;rsquo;t found any solution to unify
those two commands.&lt;/p&gt;

&lt;h2 id=&#34;xargs&#34;&gt;xargs&lt;/h2&gt;

&lt;p&gt;The last piece needed is xargs, this will read stdin and execute a command on
each entry.&lt;/p&gt;

&lt;h2 id=&#34;all-together&#34;&gt;All together&lt;/h2&gt;

&lt;p&gt;Here is my final command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd local&lt;/span&gt;/folder

&lt;span class=&#34;nv&#34;&gt;remote_loc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;my.url.com:/home/username/remote_folder&amp;quot;&lt;/span&gt;

fswatch -0 -o -e .git/ -e .pyc -e &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/static . &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
xargs -0 -I &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; rsync -avz -e &lt;span class=&#34;s2&#34;&gt;&amp;quot;ssh&amp;quot;&lt;/span&gt; . &lt;span class=&#34;nv&#34;&gt;$remote_loc&lt;/span&gt; --exclude-from &lt;span class=&#34;s1&#34;&gt;&amp;#39;exclude.txt&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;The option &lt;code&gt;-0&lt;/code&gt; indicates that fswatch will use &lt;code&gt;\0&lt;/code&gt; as a line separator.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The option &lt;code&gt;-o&lt;/code&gt; will only indicates how many files have been modified,
has long has I do not need the filename to perform the command.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The command xargs take the same option &lt;code&gt;-0&lt;/code&gt; so it will accept &lt;code&gt;\0&lt;/code&gt; as the
separator between each command.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The &lt;code&gt;-I {}&lt;/code&gt; option will tell xargs that the
caught at first will be injected in the command at the place of &lt;code&gt;{}&lt;/code&gt;
(this is the same as the -exec command in find). We do not use it because
rsync will take care to check which file has changed, this is a trick to avoid
xargs to complain.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Curl for REST</title>
      <link>http://ixday.github.io/post/curl_for_rest/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/curl_for_rest/</guid>
      <description>&lt;p&gt;It has been a long time since the last post. But today, I will just show two
tools I use for debugging my REST APIs.&lt;/p&gt;

&lt;p&gt;First one is the well known &lt;a href=&#34;http://curl.haxx.se/docs/manpage.html&#34;&gt;curl&lt;/a&gt; and
the second one is &lt;a href=&#34;http://stedolan.github.io/jq/manual/&#34;&gt;jq&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One important feature of curl is its hability to load external files for datas
with &lt;code&gt;@&lt;/code&gt; before file name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -X POST -H &lt;span class=&#34;s2&#34;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d @filepath
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then you can remove the progress bar by adding &lt;code&gt;-s&lt;/code&gt; in the options&lt;/p&gt;

&lt;p&gt;Finally, you can use jq for parsing the output with a request syntax, here is
what the final line looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -X POST -H &lt;span class=&#34;s2&#34;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -s -d @filepath &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq &lt;span class=&#34;s1&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is a small article but I just wanted to show that those tools are really
great, we do not need complex software for this. I prefer using simple cli
because it gives a better understanding on what we are doing, and on what we
are relying on.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debian Install</title>
      <link>http://ixday.github.io/post/debian-install/</link>
      <pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ixday.github.io/post/debian-install/</guid>
      <description>

&lt;p&gt;That&amp;rsquo;s a fact: I can not install a new system without getting into troubles!&lt;/p&gt;

&lt;p&gt;So, here is a small tutorial in which I will aggregate the main issues I
encountered and how I solved them.&lt;/p&gt;

&lt;h3 id=&#34;creating-a-bootable-usb-key-on-a-mac&#34;&gt;Creating a bootable USB key on a Mac&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# plug your USB key, then find it with&lt;/span&gt;
diskutil list

&lt;span class=&#34;c&#34;&gt;# unmount the usb key (it is mandatory), where X in diskX is the number assigned&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# to your USB you retrieved with the previous command&lt;/span&gt;
diskutil unmountDisk /dev/diskX

&lt;span class=&#34;c&#34;&gt;# if you are making a bootable usb key for a Mac run this command,&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# debian.img will be the output and debian-testing-amd64-CD-1.iso is&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# the iso you retrieved from internet https://www.debian.org/CD/http-ftp/&lt;/span&gt;
hdiutil convert -format UDRW -o debian.img debian-testing-amd64-CD-1.iso

&lt;span class=&#34;c&#34;&gt;# if you are making a Mac bootable usb key (X is still the disk number)&lt;/span&gt;
sudo dd &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./debian.img.dmg &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/dev/rdiskX &lt;span class=&#34;nv&#34;&gt;bs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1m

&lt;span class=&#34;c&#34;&gt;# otherwise (X is still the disk number)&lt;/span&gt;
sudo dd &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./debian-testing-amd64-CD-1.iso &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/dev/rdiskX &lt;span class=&#34;nv&#34;&gt;bs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1m

&lt;span class=&#34;c&#34;&gt;# to finish eject&lt;/span&gt;
hdiutil eject /dev/diskX
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;messing-up-during-the-installation&#34;&gt;Messing up during the installation&lt;/h3&gt;

&lt;p&gt;I use to have a lot of issues during the installation, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No installable kernel&lt;/li&gt;
&lt;li&gt;Can not install grub&lt;/li&gt;
&lt;li&gt;Whatever can happen during the installation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, it is possible to fix that during the installation process.
At the final step, just before the reboot press ctrl+alt+f3, then when prompted
press enter and you will get into a shell. It is also possible to perform that
with the Advanced Options -&amp;gt; Rescue Mode.&lt;/p&gt;

&lt;p&gt;To fix the errors we will chroot into the new system and add the missing part by
hand.&lt;/p&gt;

&lt;h4 id=&#34;chroot-into-an-other-system&#34;&gt;Chroot into an other system&lt;/h4&gt;

&lt;p&gt;First find the partition on which your system has been installed&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# parted will print you the partition of each device&lt;/span&gt;
parted /dev/sda print
parted /dev/sdb print
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once the partition is found you have to mount it&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# create a directory for the mounted partition&lt;/span&gt;
mkdir /mnt/sda1

&lt;span class=&#34;c&#34;&gt;# mount it&lt;/span&gt;
mount /dev/sda1 /mnt/sda1

&lt;span class=&#34;c&#34;&gt;# bind the main parts&lt;/span&gt;
mount -o &lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt; /dev /mnt/sda1/dev
mount -o &lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt; /dev/pts /mnt/sda1/dev/pts
mount -o &lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt; /proc /mnt/sda1/proc
mount -o &lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt; /run /mnt/sda1/run
mount -o &lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt; /sys /mnt/sda1/sys

&lt;span class=&#34;c&#34;&gt;# chroot in the system&lt;/span&gt;
chroot /mnt/sda1 /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;dealing-with-the-system&#34;&gt;Dealing with the system&lt;/h4&gt;

&lt;p&gt;Actualize the file &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; with the following
&lt;a href=&#34;http://debgen.simplylinux.ch/&#34;&gt;site&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# update&lt;/span&gt;
apt-get update

&lt;span class=&#34;c&#34;&gt;# install the kernel, for me it is an amd64 architecture, to find yours just run&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# apt-cache search linux-image and choose the one for your needs&lt;/span&gt;
apt-get install linux-image-amd64

&lt;span class=&#34;c&#34;&gt;# install grub2, when installing it will ask for the device on which you want&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# grub to be installed, choose the device not the partition, here it will be&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# /dev/sda&lt;/span&gt;
apt-get install grub2

&lt;span class=&#34;c&#34;&gt;# update grub just in case&lt;/span&gt;
update-grub

&lt;span class=&#34;c&#34;&gt;# do not forget to initialize the password&lt;/span&gt;
passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First step is done, and you will now be able to boot on your new system&lt;/p&gt;

&lt;h3 id=&#34;rebooting-and-first-configuration&#34;&gt;Rebooting and first configuration&lt;/h3&gt;

&lt;h4 id=&#34;set-up-the-locales&#34;&gt;Set up the locales&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# install the package&lt;/span&gt;
apt-get install locales

&lt;span class=&#34;c&#34;&gt;# set the variables up, select the ones you want with space&lt;/span&gt;
dpkg-reconfigure locales
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;set-up-the-keyboard&#34;&gt;Set up the keyboard&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# install the package&lt;/span&gt;
apt-get install console-data

&lt;span class=&#34;c&#34;&gt;# for me it is a french keyboard&lt;/span&gt;
loadkeys fr-latin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Test if the configuration works for you, then you can save it by adding to
&lt;code&gt;/etc/rc.locals&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# the path to the keymap is displayed when you use the loadkeys command&lt;/span&gt;
/usr/bin/loadkeys /usr/share/keymaps/i386/azerty/fr-latin9.kmap.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;a-name-users-a-users&#34;&gt;&lt;a name=&#34;users&#34;&gt;&lt;/a&gt;Users&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# install sudo&lt;/span&gt;
apt-get install sudo

&lt;span class=&#34;c&#34;&gt;# add new user called foo with a home folder (-m),&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# users as first group (-g group_name), sudo as additionnal group (-G group_name)&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# and bash as login shell&lt;/span&gt;
useradd -m -g users -G sudo -s /bin/bash foo

&lt;span class=&#34;c&#34;&gt;# change user password&lt;/span&gt;
passwd foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;display-manager&#34;&gt;Display Manager&lt;/h3&gt;

&lt;p&gt;Here I will use i3 on top of xorg&lt;/p&gt;

&lt;h4 id=&#34;init&#34;&gt;Init&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# install xorg and i3&lt;/span&gt;
apt-get install xorg i3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create a file at the root of the user &lt;code&gt;~/.bash_profile&lt;/code&gt; if you are using bash
&lt;code&gt;~/.zprofile&lt;/code&gt; if using zsh, if you have another login shell please refer to the
dedicated doc.&lt;/p&gt;

&lt;p&gt;In our configuration it will be bash due to the &lt;a href=&#34;#users&#34;&gt;user creation&lt;/a&gt;.
Add &lt;code&gt;startx&lt;/code&gt; at any point of the file. This will launch xserver at login.
Then we want to launch i3. To do that add &lt;code&gt;exec i3&lt;/code&gt; at any point of the file
&lt;code&gt;~/.xinitrc&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;set-x-keyboard-layout&#34;&gt;Set X keyboard layout&lt;/h4&gt;

&lt;p&gt;To have the correct layout for X add the above commands in your &lt;code&gt;.xinitrc&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# reset the options&lt;/span&gt;
setxkbmap -option

&lt;span class=&#34;c&#34;&gt;# I only add the option to quit X by pressing ctrl+alt+backspace&lt;/span&gt;
setxkbmap -layout fr -variant latin9 -option terminate:ctrl_alt_bksp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To see all available options you can type &lt;code&gt;localectl list-x11-keymap-options&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To see current configuration type &lt;code&gt;setxkbmap -query&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the basic configuration for my linux. Trying to allocate the main issues
I had.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>